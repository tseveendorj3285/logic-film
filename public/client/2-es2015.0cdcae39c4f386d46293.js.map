{"version":3,"sources":["webpack:///src/app/site/people/crupdate-person/state/crupdate-person-state-actions.ts","webpack:///src/app/models/person.ts","webpack:///src/app/site/people/crupdate-person/state/crupdate-person-state.ts","webpack:///src/app/site/people/crupdate-person/crupdate-person-page.component.html","webpack:///src/app/site/people/crupdate-person/crupdate-person-routing.module.ts","webpack:///src/app/site/people/crupdate-person/crupdate-person-page.component.ts","webpack:///src/app/site/people/crupdate-person/crupdate-person.module.ts"],"names":["LoadPerson","id","type","DetachCredit","CreatePerson","payload","UpdatePerson","ResetState","Person","params","name","this","CrupdatePersonState","people","titles","state","person","loading","credits","ctx","action","patchState","get","pipe","tap","response","flattenCredits","create","finalize","update","getState","removeCredit","newCredits","filter","credit","pivot","flatCredits","Object","keys","forEach","key","push","defaults","routes","path","component","CrupdatePersonPageComponent","store","toast","router","fb","route","uploadQueue","poster$","BehaviorSubject","dataSource","personForm","group","poster","popularity","description","known_for","birth_place","birth_date","death_date","gender","allow_update","sortingDataAccessor","item","property","subscribe","loadPerson","select","data","valueChanges","value","next","dispatch","types","image","then","upload","start","uri","httpParams","diskPrefix","patchValue","fileEntry","url","selectSnapshot","navigate","includes","split","replace","open","PERSON_UPDATE_SUCCESS","PERSON_CREATE_SUCCESS","CREDIT_REMOVE_SUCCESS","submit","uploadPoster","applyFilter","permissions","CrupdatePersonRoutingModule","forChild","CrupdatePersonModule","forFeature"],"mappings":"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","file":"x","sourcesContent":["import {Person} from '../../../../models/person';\r\n\r\nexport class LoadPerson {\r\n    static readonly type = '[CrupdatePerson] Load Person';\r\n    constructor(public id: number) {}\r\n}\r\n\r\nexport class DetachCredit {\r\n    static readonly type = '[CrupdatePerson] Detach Credit';\r\n    constructor(public id: number) {}\r\n}\r\n\r\nexport class CreatePerson {\r\n    static readonly type = '[CrupdatePerson] Create Person';\r\n    constructor(public payload: Partial<Person>) {}\r\n}\r\n\r\nexport class UpdatePerson {\r\n    static readonly type = '[CrupdatePerson] Update Person';\r\n    constructor(public payload: Partial<Person>) {}\r\n}\r\n\r\nexport class ResetState {\r\n    static readonly type = '[CrupdatePerson] Reset State';\r\n}\r\n","import {MEDIA_TYPE} from '../site/media-type';\r\nimport {Title} from './title';\r\n\r\nexport class Person {\r\n    id: number;\r\n    name: string;\r\n    poster: string;\r\n    known_for?: string;\r\n    gender?: string;\r\n    birth_date: string;\r\n    death_date: string;\r\n    birth_place: string;\r\n    credits?: Title[];\r\n    popular_credits?: Title[];\r\n    description: string;\r\n    type: MEDIA_TYPE.PERSON;\r\n\r\n    constructor(params: object = {}) {\r\n        for (const name in params) {\r\n            this[name] = params[name];\r\n        }\r\n    }\r\n}\r\n","import {Action, Selector, State, StateContext} from '@ngxs/store';\r\nimport {Person} from '../../../../models/person';\r\nimport {finalize, tap} from 'rxjs/operators';\r\nimport {\r\n    CreatePerson,\r\n    DetachCredit,\r\n    LoadPerson,\r\n    ResetState,\r\n    UpdatePerson\r\n} from './crupdate-person-state-actions';\r\nimport {PeopleService} from '../../people.service';\r\nimport {TitleCredit} from '../../../../models/title';\r\nimport {TitlesService} from '../../../titles/titles.service';\r\nimport {Injectable} from '@angular/core';\r\n\r\ninterface CrupdatePersonStateModel {\r\n    person: Person;\r\n    credits: TitleCredit[];\r\n    loading: boolean;\r\n}\r\n\r\n@State<CrupdatePersonStateModel>({\r\n    name: 'crupdatePerson',\r\n    defaults: {\r\n        person: new Person(),\r\n        credits: [],\r\n        loading: false,\r\n    },\r\n})\r\n@Injectable()\r\nexport class CrupdatePersonState {\r\n    @Selector()\r\n    static person(state: CrupdatePersonStateModel) {\r\n        return state.person;\r\n    }\r\n\r\n    @Selector()\r\n    static loading(state: CrupdatePersonStateModel) {\r\n        return state.loading;\r\n    }\r\n\r\n    @Selector()\r\n    static credits(state: CrupdatePersonStateModel) {\r\n        return state.credits;\r\n    }\r\n\r\n    constructor(\r\n        private people: PeopleService,\r\n        private titles: TitlesService,\r\n    ) {}\r\n\r\n    @Action(LoadPerson)\r\n    loadPerson(ctx: StateContext<CrupdatePersonStateModel>, action: LoadPerson) {\r\n        ctx.patchState({loading: true});\r\n        return this.people.get(action.id).pipe(tap(response => {\r\n            ctx.patchState({\r\n                person: response.person,\r\n                credits: this.flattenCredits(response.credits),\r\n                loading: false\r\n            });\r\n        }));\r\n    }\r\n\r\n    @Action(CreatePerson)\r\n    createPerson(ctx: StateContext<CrupdatePersonStateModel>, action: CreatePerson) {\r\n        ctx.patchState({loading: true});\r\n        return this.people.create(action.payload).pipe(\r\n            finalize(() => ctx.patchState({loading: false})),\r\n            tap(response => ctx.patchState({person: response.person}))\r\n        );\r\n    }\r\n\r\n    @Action(UpdatePerson)\r\n    updatePerson(ctx: StateContext<CrupdatePersonStateModel>, action: UpdatePerson) {\r\n        ctx.patchState({loading: true});\r\n        return this.people.update(ctx.getState().person.id, action.payload).pipe(\r\n            finalize(() => ctx.patchState({loading: false})),\r\n            tap(response => ctx.patchState({person: response.person}))\r\n        );\r\n    }\r\n\r\n    @Action(DetachCredit)\r\n    removeCredit(ctx: StateContext<CrupdatePersonStateModel>, action: DetachCredit) {\r\n        ctx.patchState({loading: true});\r\n        return this.titles.removeCredit(action.id).pipe(\r\n            tap(() => {\r\n                const newCredits = ctx.getState().credits.filter(credit => {\r\n                    return credit.pivot.id !== action.id;\r\n                });\r\n                ctx.patchState({credits: newCredits});\r\n            }),\r\n            finalize(() => ctx.patchState({loading: false}))\r\n        );\r\n    }\r\n\r\n    @Action(ResetState)\r\n    resetState(ctx: StateContext<CrupdatePersonStateModel>) {\r\n        ctx.patchState({\r\n            person: new Person(),\r\n            credits: [],\r\n            loading: false,\r\n        });\r\n    }\r\n\r\n    private flattenCredits(credits: object) {\r\n        const flatCredits = [];\r\n        Object.keys(credits).forEach(key => {\r\n            flatCredits.push(...credits[key]);\r\n        });\r\n        return flatCredits;\r\n    }\r\n}\r\n","<mat-tab-group animationDuration=\"0ms\" class=\"material-panel\" color=\"accent\">\r\n    <mat-tab [label]=\"'Primary Facts' | trans\">\r\n        <form class=\"primary-facts-panel\" (ngSubmit)=\"submit()\" [formGroup]=\"personForm\" ngNativeValidate>\r\n            <div class=\"left-col\">\r\n                <media-image [src]=\"poster$ | async\" size=\"medium\"></media-image>\r\n                <button type=\"submit\" mat-raised-button color=\"accent\" class=\"submit-button\" trans>Save</button>\r\n            </div>\r\n            <div class=\"right-col many-inputs\">\r\n                <div class=\"inline-container many-inputs\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"name\" trans>Name</label>\r\n                        <input type=\"text\" formControlName=\"name\" id=\"name\" required>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label for=\"known_for\" trans>Known For</label>\r\n                        <input type=\"text\" formControlName=\"known_for\" id=\"known_for\">\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"input-container\">\r\n                    <label for=\"poster\" trans>Image</label>\r\n                    <div class=\"input-with-action action-left\">\r\n                        <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadPoster()\" [matTooltip]=\"'Upload poster' | trans\">\r\n                            <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                        </button>\r\n                        <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"input-container\">\r\n                    <label for=\"description\" trans>Biography</label>\r\n                    <textarea id=\"description\" formControlName=\"description\" cdkTextareaAutosize cdkAutosizeMinRows=\"10\" cdkAutosizeMaxRows=\"100\"></textarea>\r\n                </div>\r\n\r\n                <div class=\"inline-container many-inputs\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"gender\" trans>Gender</label>\r\n                        <select id=\"gender\" formControlName=\"gender\">\r\n                            <option [ngValue]=\"null\">-</option>\r\n                            <option value=\"male\" trans>Male</option>\r\n                            <option value=\"female\" trans>Female</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label for=\"birth_date\" trans>Birth Date</label>\r\n                        <input type=\"date\" id=\"birth_date\" formControlName=\"birth_date\">\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label for=\"death_date\" trans>Death Date</label>\r\n                        <input type=\"date\" id=\"death_date\" formControlName=\"death_date\">\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"inline-container many-inputs\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"popularity\" trans>Popularity</label>\r\n                        <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\" step=\"0.1\">\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"birth_place\" trans>Birth Place</label>\r\n                        <input type=\"text\" id=\"birth_place\" formControlName=\"birth_place\">\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"allow_update\" trans>Allow Auto Update</label>\r\n                        <select formControlName=\"allow_update\" id=\"allow_update\" required>\r\n                            <option [ngValue]=\"true\" trans>Yes</option>\r\n                            <option [ngValue]=\"false\" trans>No</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </mat-tab>\r\n    <mat-tab [label]=\"'Credits' | trans\">\r\n        <div class=\"table-header\">\r\n            <div class=\"input-container\">\r\n                <input type=\"text\" (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Search...\" trans-placeholder>\r\n                <mat-icon svgIcon=\"search\"></mat-icon>\r\n            </div>\r\n        </div>\r\n\r\n        <mat-table [dataSource]=\"dataSource\" matSort class=\"credits-table\">\r\n            <ng-container matColumnDef=\"credit\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header trans>Credit</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let credit\">\r\n                    <media-image [src]=\"credit.poster\" size=\"small\"></media-image>\r\n                    <span>{{credit.name}}</span>\r\n                </mat-cell>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"character\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header trans>Character</mat-header-cell>\r\n                <mat-cell *matCellDef=\"let credit\"> {{credit.pivot?.character ? credit.pivot.character : '-'}} </mat-cell>\r\n            </ng-container>\r\n\r\n            <ng-container>\r\n                <ng-container matColumnDef=\"department\">\r\n                    <mat-header-cell *matHeaderCellDef mat-sort-header trans>Department</mat-header-cell>\r\n                    <mat-cell *matCellDef=\"let credit\"> {{credit.pivot?.department ? credit.pivot.department : '-'}} </mat-cell>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"job\">\r\n                    <mat-header-cell *matHeaderCellDef mat-sort-header trans>Job</mat-header-cell>\r\n                    <mat-cell *matCellDef=\"let credit\"> {{credit.pivot?.job ? credit.pivot.job : '-'}} </mat-cell>\r\n                </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"edit\">\r\n                <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n                <mat-cell *matCellDef=\"let credit\">\r\n                    <button type=\"button\" mat-icon-button (click)=\"detachCredit(credit)\">\r\n                        <mat-icon svgIcon=\"close\"></mat-icon>\r\n                    </button>\r\n                </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row *matHeaderRowDef=\"['credit', 'character', 'department', 'job', 'edit']\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let myRowData; columns: ['credit', 'character', 'department', 'job', 'edit']\"></mat-row>\r\n        </mat-table>\r\n\r\n        <no-results-message *ngIf=\"!dataSource.data.length\">\r\n            <span primary-text trans>Nothing to Display.</span>\r\n            <span secondary-text trans>There are no credits attached yet.</span>\r\n        </no-results-message>\r\n    </mat-tab>\r\n</mat-tab-group>\r\n\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {CrupdatePersonPageComponent} from './crupdate-person-page.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CrupdatePersonPageComponent,\n        data: {permissions: ['people.update']}\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CrupdatePersonRoutingModule { }\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {\r\n    CreatePerson,\r\n    DetachCredit,\r\n    LoadPerson,\r\n    ResetState,\r\n    UpdatePerson\r\n} from './state/crupdate-person-state-actions';\r\nimport {CrupdatePersonState} from './state/crupdate-person-state';\r\nimport {FormBuilder} from '@angular/forms';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TitleCredit} from '../../../models/title';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {MESSAGES} from '../../../toast-messages';\r\nimport {UploadQueueService} from '../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {Toast} from '../../../../common/core/ui/toast.service';\r\nimport {openUploadWindow} from '../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../common/uploads/upload-input-config';\r\n\r\n@Component({\r\n    selector: 'crupdate-person-page',\r\n    templateUrl: './crupdate-person-page.component.html',\r\n    styleUrls: ['./crupdate-person-page.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [UploadQueueService],\r\n})\r\nexport class CrupdatePersonPageComponent implements OnInit, OnDestroy {\r\n    @Select(CrupdatePersonState.loading) loading$: Observable<boolean>;\r\n    @Select(CrupdatePersonState.credits) credits$: Observable<TitleCredit[]>;\r\n    public poster$ = new BehaviorSubject<string>(null);\r\n    public dataSource = new MatTableDataSource();\r\n\r\n    public personForm = this.fb.group({\r\n        name: [''],\r\n        poster: [''],\r\n        popularity: [''],\r\n        description: [''],\r\n        known_for: [''],\r\n        birth_place: [''],\r\n        birth_date: [''],\r\n        death_date: [''],\r\n        gender: [null],\r\n        allow_update: [true],\r\n    });\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private router: Router,\r\n        private fb: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private uploadQueue: UploadQueueService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        // TODO: sorting accessor not working for some reason\r\n        this.dataSource.sortingDataAccessor = (item: TitleCredit, property) => {\r\n            switch (property) {\r\n                case 'credit':\r\n                    return item.name;\r\n                default:\r\n                    return item.pivot[property];\r\n            }\r\n        };\r\n\r\n        this.route.params.subscribe(params => {\r\n            this.loadPerson(params);\r\n        });\r\n\r\n        this.store.select(CrupdatePersonState.credits).subscribe(credits => {\r\n            this.dataSource.data = credits;\r\n        });\r\n\r\n        this.personForm.get('poster').valueChanges.subscribe(value => {\r\n            this.poster$.next(value);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.store.dispatch(new ResetState());\r\n    }\r\n\r\n    public uploadPoster() {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                uri: 'uploads/images',\r\n                httpParams: {\r\n                    diskPrefix: 'media-images/posters'\r\n                },\r\n            };\r\n            this.uploadQueue.start(upload, params).subscribe(response => {\r\n                this.personForm.patchValue({\r\n                    poster: response.fileEntry.url\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private loadPerson(params: {id?: string}) {\r\n        if ( ! params.id) return;\r\n        this.store.dispatch(new LoadPerson(+params.id)).subscribe(() => {\r\n            const person = this.store.selectSnapshot(CrupdatePersonState.person);\r\n            this.personForm.patchValue(person);\r\n            this.poster$.next(person.poster);\r\n        });\r\n    }\r\n\r\n    public submit() {\r\n        const person = this.store.selectSnapshot(CrupdatePersonState.person);\r\n        const response = person.id ?\r\n            this.store.dispatch(new UpdatePerson(this.personForm.value)) :\r\n            this.store.dispatch(new CreatePerson(this.personForm.value));\r\n\r\n        response.subscribe(() => {\r\n            if (person.id) {\r\n                this.router.navigate([this.router.url.includes('admin') ? 'admin/people' : this.router.url.split('?')[0].replace('/edit', '')]);\r\n            } else {\r\n                this.router.navigate(['edit']);\r\n            }\r\n            this.toast.open(person.id ? MESSAGES.PERSON_UPDATE_SUCCESS : MESSAGES.PERSON_CREATE_SUCCESS);\r\n        });\r\n    }\r\n\r\n    public detachCredit(credit: TitleCredit) {\r\n        if ( ! credit.pivot) return;\r\n        this.store.dispatch(new DetachCredit(credit.pivot.id))\r\n            .subscribe(() => {\r\n                this.toast.open(MESSAGES.CREDIT_REMOVE_SUCCESS);\r\n            });\r\n    }\r\n\r\n    public applyFilter(value: string) {\r\n        this.dataSource.filter = value;\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CrupdatePersonRoutingModule} from './crupdate-person-routing.module';\nimport {CrupdatePersonPageComponent} from './crupdate-person-page.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {TranslationsModule} from '../../../../common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatSortModule} from '@angular/material/sort';\nimport {NoResultsMessageModule} from '../../../../common/core/ui/no-results-message/no-results-message.module';\nimport {LoadingIndicatorModule} from '../../../../common/core/ui/loading-indicator/loading-indicator.module';\nimport {NgxsModule} from '@ngxs/store';\nimport {CrupdatePersonState} from './state/crupdate-person-state';\n\n\n@NgModule({\n    declarations: [\n        CrupdatePersonPageComponent,\n    ],\n    imports: [\n        CommonModule,\n        CrupdatePersonRoutingModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MediaImageModule,\n        NoResultsMessageModule,\n        LoadingIndicatorModule,\n\n        NgxsModule.forFeature([\n            CrupdatePersonState\n        ]),\n\n        // material\n        MatTabsModule,\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        TextFieldModule,\n        MatTableModule,\n        MatSortModule,\n    ]\n})\nexport class CrupdatePersonModule {\n}\n"]}