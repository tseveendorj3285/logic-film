{"version":3,"sources":["webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.ts","webpack:///src/common/tags/tags-manager/tags-manager.component.html","webpack:///src/common/tags/tags-manager/tags-manager.component.ts","webpack:///src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.ts","webpack:///src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/reviews-panel/reviews-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/reviews-panel/reviews-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title-routing.module.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/crupdate-title-resolver.service.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title.module.ts","webpack:///src/common/core/ui/between-date-input/between-date-input.module.ts","webpack:///src/common/core/ui/select-user-input/select-user-input.module.ts","webpack:///src/common/shared/data-table/data-table-intl.service.ts","webpack:///src/common/shared/data-table/data-table.module.ts","webpack:///src/common/core/services/tags.service.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/paginator.js","webpack:///src/common/core/ui/select-user-input/select-user-input/select-user-input.component.ts","webpack:///src/common/core/ui/select-user-input/select-user-input/select-user-input.component.html","webpack:///src/common/core/ui/between-date-input/between-input/between-input.component.ts","webpack:///src/common/core/ui/between-date-input/between-input/between-input.component.html","webpack:///src/app/admin/data-table-inputs/app-data-table-inputs/app-data-table-inputs.component.html","webpack:///src/app/admin/data-table-inputs/app-data-table-inputs/app-data-table-inputs.component.ts","webpack:///src/common/shared/data-table/filter-panel/filter-panel.component.html","webpack:///src/common/shared/data-table/filter-panel/filter-panel.component.ts","webpack:///src/common/core/ui/overlay-panel/positions/left-position.ts","webpack:///src/common/shared/data-table/data-table.component.html","webpack:///src/common/shared/data-table/data-table.component.ts","webpack:///src/app/admin/video-index/video-index-filters.ts","webpack:///src/app/admin/video-index/video-index.component.html","webpack:///src/app/admin/video-index/video-index.component.ts","webpack:///src/common/shared/data-table/data/paginated-data-table-source.ts","webpack:///src/common/core/utils/array-to-object.ts","webpack:///src/common/shared/paginator.service.ts"],"names":["PrimaryFactsPanelComponent","store","fb","route","uploadQueue","settings","router","titles","toast","poster$","BehaviorSubject","form","this","group","name","required","minLength","is_series","language","tagline","maxLength","poster","backdrop","description","budget","min","revenue","runtime","max","country","popularity","certification","release_date","allow_update","certificationOptions","getJson","dispatch","select","title","pipe","filter","t","id","take","subscribe","patchValue","split","next","get","valueChanges","value","type","types","image","then","upload","start","uri","httpParams","diskPrefix","fileEntry","url","titleId","selectSnapshot","update","create","finalize","open","TITLE_UPDATE_SUCCESS","TITLE_CREATE_SUCCESS","navigate","includes","replace","submit","uploadImage","loading","languageOptions","CrupdateCreditModalComponent","actions$","dialogRef","valueLists","data","character","department","job","availableJobs","credit","pivot","response","tmdbJobs","forEach","jobGroup","jobs","map","jobName","filteredJobs","startWith","q","v","toLowerCase","slice","action","getPayload","mediaItem","close","CREDIT_UPDATE_SUCCESS","CREDIT_ADD_SUCCESS","errResponse","message","payload","PERSON","e","find","option","confirm","CreditsPanelComponent","dialog","castColumns","crewColumns","dataSource","sort","matSort","sortingDataAccessor","item","property","changes","currentValue","getCast","credits","getCrew","body","ok","afterClosed","confirmed","CREDIT_REMOVE_SUCCESS","previousIndex","currentIndex","openCrupdateCreditModal","applyFilter","changeCreditsOrder","CrupdateEpisodeModalComponent","episode$","errors$","episodeForm","episode_number","episode","bindToStoreEpisode","setTimeout","loadEpisodeCredits","season","episode_count","updateEpisode","createEpisode","EPISODE_CREATE_SUCCESS","episodes","seasons","s","length","errors","EPISODE_UPDATE_SUCCESS","number","season_number","toPromise","uploadPoster","EpisodesPanelComponent","trackByFn","i","episodeNum","snapshot","params","episodeNumber","openCrupdateEpisodeModal","EPISODE_DELETE_SUCCESS","panelClass","SeasonsPanelComponent","modal","el","activeSeason$","seasonNumber","nativeElement","querySelector","scrollIntoView","behavior","block","inline","SEASON_CREATE_SUCCESS","bodyBold","SEASON_DELETE_SUCCESS","index","ImagesPanelComponent","images","viewportRuler","dropListEnterPredicate","drag","drop","placeholder","activeContainer","phElement","element","sourceElement","dropContainer","dropElement","dragIndex","__indexOf","parentElement","children","source","dropIndex","sourceIndex","style","width","clientWidth","height","clientHeight","removeChild","targetIndex","target","display","insertBefore","nextSibling","_dropListRef","enter","_dragRef","offsetLeft","offsetTop","modelId","IMAGE_CREATE_SUCCESS","IMAGE_DELETE_SUCCESS","point","getPointerPositionOnPage","event","listGroup","_items","dropList","x","y","top","bottom","left","right","getBoundingClientRect","parent","appendChild","startsWith","touches","changedTouches","scrollPosition","getViewportScrollPosition","pageX","pageY","dropListDropped","collection","node","Array","prototype","indexOf","call","TagsManagerComponent","tagService","readonly","pluralName","formControl","selectedTags$","existingTags$","suggestedTags$","perPage","tagType","pagination","tag","suggestions","selectTags","fn","propagateChange","tags","propagate","newTags","trim","reset","tagName","selectedTags","splice","tagString","provide","useExisting","multi","SelectTagsModalComponent","selectedTagsControl","TagsPanelComponent","getTagObservable","beforeClosed","tagNames","TAG_DETACH_SUCCESS","keywords","genres","countries","openTagManagerModal","ReviewsPanelComponent","reviews","paginator","currentUser","dontUpdateQueryParams","dataPaginator","staticParams","compact","destroy","review","mediaId","newReview","show","ids","getSelectedItems","delete","CrupdateTitleComponent","activePanel$","api","queryParams","active","routes","path","component","resolve","CrupdateTitleResolverService","state","fullCredits","skipUpdating","allVideos","catchError","fallbackUri","mergeMap","of","permissions","CrupdateTitleRoutingModule","forChild","CrupdateTitleModule","BetweenDateInputModule","SelectUserInputModule","DataTableIntlService","i18n","super","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","page","pageSize","startIndex","Math","DataTableModule","useClass","TagsService","http","post","put","tagIds","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ctx_r2","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_2_Template","MatSelect_span_5_Template","undefined","ctx_r3","customTrigger","MatSelect_ng_template_8_Template","_r9","$event","_panelDoneAnimatingStream","toState","_handleKeydown","ctx_r4","_getPanelTheme","_transformOrigin","_triggerFontSize","multiple","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","deps","useFactory","overlay","scrollStrategies","reposition","MatSelectChange","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MatSelectTrigger","ɵfac","ɵdir","selectors","MatSelect","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","defaults","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_onChange","_onTouched","_optionIds","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","defer","options","switchMap","merge","onSelectionChange","onStable","asObservable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","disableOptionCentering","typeaheadDebounceInterval","_placeholder","stateChanges","c","_selectionModel","Error","_initializeSelection","_value","newValue","writeValue","_typeaheadDebounceInterval","_id","distinctUntilChanged","takeUntil","panelOpen","emit","overlayDir","offsetX","markForCheck","change","_triggerRect","trigger","_initKeyManager","changed","added","removed","deselect","_resetOptions","updateErrorState","_keyManager","withTypeAhead","complete","disabled","getComputedStyle","fontSize","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","_isRtl","_setSelectionByValue","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","setFirstItemActive","setLastItemActive","onKeydown","selectedOption","announce","activeItem","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","color","isEmpty","Promise","isArray","clear","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","withVerticalOrientation","withAllowedModifierKeys","tabOut","focus","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","toArray","a","b","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","optionGroups","_getItemHeight","reduce","result","current","itemHeight","items","_getItemCount","panelHeight","maxScroll","selectedOptionOffset","_getOptionIndex","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","ariaLabelledby","_hasFloatingLabel","_getAriaLabel","_labelId","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","leftOverflow","rightOverflow","round","updatePosition","optionHeightAdjustment","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_ariaDescribedby","ɵcmp","contentQueries","dirIndex","_t","viewQuery","hostAttrs","hostVars","hostBindings","_onFocus","_onBlur","_getAriaLabelledby","toString","errorState","_getAriaActiveDescendant","inputs","disableRipple","compareWith","errorStateMatcher","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","template","toggle","_onAttached","_r0","directives","styles","encapsulation","animation","changeDetection","MatSelectModule","ɵmod","ɵinj","factory","providers","imports","MatPaginator_div_2_mat_form_field_3_mat_option_2_Template","pageSizeOption_r6","$implicit","MatPaginator_div_2_mat_form_field_3_Template","_r8","_changePageSize","_intl","_displayedPageSizeOptions","MatPaginator_div_2_div_4_Template","MatPaginator_div_2_Template","ctx_r0","MatPaginator_button_6_Template","_r10","firstPage","ctx_r1","firstPageLabel","_previousButtonsDisabled","MatPaginator_button_13_Template","_r12","lastPage","lastPageLabel","_nextButtonsDisabled","MatPaginatorIntl","ɵprov","token","providedIn","MAT_PAGINATOR_INTL_PROVIDER","parentIntl","MAT_PAGINATOR_DEFAULT_OPTIONS","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","pageSizeOptions","hidePageSize","showFirstLastButtons","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","_markInitialized","unsubscribe","hasNextPage","previousPageIndex","pageIndex","_emitPageEvent","hasPreviousPage","getNumberOfPages","maxPageIndex","ceil","push","previousPage","nextPage","MatPaginatorModule","SelectUserInputComponent","users","searchFormControl","loading$","users$","selectedUser$","searchedOnce","bindToSearchControl","query","searchUsers","getAll","per_page","clearSearchInput","searchInput","user","setValue","onMenuOpened","onMenuClosed","stopPropagation","selectUser","BetweenInputComponent","setDefaultDate","showLabels","datePattern","initiated","from","to","defaultFrom","getDefaultDate","defaultTo","minusDays","d","Date","setDate","getDate","month","addZero","getMonth","day","getFullYear","AppDataTableInputsComponent","FilterPanelComponent","overlayPanelRef","portals","subscription","filterForm","config","filters","displayName","viewName","condition","dialogContainer","LEFT_POSITION","DataTableComponent","overlayPanel","showCheckbox","hideHeader","columns","matPaginator","delayInit","init","rowDef","table","addRowDef","columnDefs","columnDef","addColumnDef","filterPanelRef","position","offsetY","origin","filterButton","mobilePosition","VIDEO_INDEX_FILTERS","column","VideoIndexComponent","videos","urls","modifying$","disable","selectedRows","deleteSelectedPeople","video","hideTitleSelect","newVideo","request","approved","disapprove","approve","Default","pagination$","userParamsChange$","searchControl","nextPageLoader$","virtualSort$","paginationParams","activeFilters$","Object","entries","entry","f","control","defaultValue","addControl","applyFiltersFromQueryParams","paginatedOnce$","val","combineLatest","noResults$","noResults","paginationResponse","total","hasValue","allRowsSelected","deselectAllItems","row","getCurrentPage","last_page","resetSort","resetMatPaginator","reload","updateConfig","sortChange","initialized","pageChange","searchChange","debounceTime","filterChange","keys","key","transformParams","paginate","initialData","current_page","appendData","currentData","originalParams","previous","orderBy","orderDir","direction","keysToRemove","disableClear","currentQueryParams","queryValues","controls","filterName","queryValue","Paginator","params$","lastResponse$","userParams","routerState","root","backendUri","updateQueryParams","replaceUrl"],"mappings":"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","file":"x","sourcesContent":["<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n    <div class=\"poster-container\">\r\n        <media-image [src]=\"poster$ | async\"></media-image>\r\n        <div class=\"many-inputs\">\r\n            <div class=\"input-container\">\r\n                <label for=\"name\" trans>Title</label>\r\n                <input type=\"text\" formControlName=\"name\" id=\"name\" minlength=\"1\" maxlength=\"250\" required>\r\n            </div>\r\n\r\n           <div class=\"inline-container\">\r\n               <div class=\"input-container\">\r\n                   <label for=\"type\" trans>Type</label>\r\n                   <select formControlName=\"is_series\" id=\"type\" required>\r\n                       <option [ngValue]=\"false\" trans>Movie</option>\r\n                       <option [ngValue]=\"true\" trans>TV Series</option>\r\n                   </select>\r\n               </div>\r\n\r\n               <div class=\"input-container\">\r\n                   <label for=\"allow_update\" trans>Allow Auto Update</label>\r\n                   <select formControlName=\"allow_update\" id=\"allow_update\" required>\r\n                       <option [ngValue]=\"true\" trans>Yes</option>\r\n                       <option [ngValue]=\"false\" trans>No</option>\r\n                   </select>\r\n               </div>\r\n           </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"poster\" trans>Poster</label>\r\n                <div class=\"input-with-action action-left\">\r\n                    <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadImage('poster')\" [matTooltip]=\"'Upload poster' | trans\">\r\n                        <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                    </button>\r\n                    <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"backdrop\" trans>Backdrop</label>\r\n                <div class=\"input-with-action action-left\">\r\n                    <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadImage('backdrop')\" [matTooltip]=\"'Upload backdrop' | trans\">\r\n                        <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                    </button>\r\n                    <input type=\"text\" formControlName=\"backdrop\" id=\"backdrop\" minlength=\"1\" maxlength=\"250\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"release_date\" trans>Release Date</label>\r\n            <input type=\"date\" formControlName=\"release_date\" id=\"release_date\" required>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"tagline\" trans>Tagline</label>\r\n            <input type=\"text\" formControlName=\"tagline\" id=\"tagline\" minlength=\"1\" maxlength=\"250\">\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"input-container\">\r\n        <label for=\"description\" trans>Overview</label>\r\n        <textarea type=\"text\" formControlName=\"description\" id=\"description\" minlength=\"1\" cdkTextareaAutosize cdkAutosizeMinRows=\"6\"></textarea>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"runtime\" trans>Runtime</label>\r\n            <input type=\"number\" formControlName=\"runtime\" id=\"runtime\" min=\"1\" max=\"500\">\r\n        </div>\r\n\r\n        <div class=\"input-container certification-input-container\">\r\n            <label for=\"certification\" trans>Certification</label>\r\n            <select formControlName=\"certification\" id=\"certification\">\r\n                <option [ngValue]=\"certification\" *ngFor=\"let certification of certificationOptions\">{{certification}}</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"budget\" trans>Budget</label>\r\n            <input type=\"number\" formControlName=\"budget\" id=\"budget\" min=\"1\">\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"revenue\" trans>Revenue</label>\r\n            <input type=\"number\" formControlName=\"revenue\" id=\"revenue\" min=\"1\">\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"popularity\" trans>Popularity</label>\r\n            <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\">\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"language\" trans>Language</label>\r\n            <select formControlName=\"language\" id=\"language\" required>\r\n                <option [value]=\"language.code\" *ngFor=\"let language of languageOptions$ | async\">{{language.name}}</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n\r\n    <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Save</button>\r\n</form>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {FormBuilder, Validators} from '@angular/forms';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Title} from '../../../../../../models/title';\r\nimport {LoadSelectOptions, ToggleLoading} from '../../state/crupdate-title-actions';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {LanguageListItem} from '../../../../../../../common/core/services/value-lists.service';\r\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\r\nimport {filter, finalize, take} from 'rxjs/operators';\r\nimport {Settings} from '../../../../../../../common/core/config/settings.service';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {TitlesService} from '../../../../titles.service';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\n\r\n@Component({\r\n    selector: 'primary-facts-panel',\r\n    templateUrl: './primary-facts-panel.component.html',\r\n    styleUrls: ['./primary-facts-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [UploadQueueService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PrimaryFactsPanelComponent implements OnInit {\r\n    @Select(CrupdateTitleState.title) title$: Observable<Title>;\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    @Select(CrupdateTitleState.languageOptions) languageOptions$: Observable<LanguageListItem[]>;\r\n    public certificationOptions: string[];\r\n    public poster$ = new BehaviorSubject<string>(null);\r\n\r\n    public form = this.fb.group({\r\n        name: ['', [Validators.required, Validators.minLength(1)]],\r\n        is_series: [false, [Validators.required]],\r\n        language: [''],\r\n        tagline: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        backdrop: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        description: ['', [Validators.minLength(1)]],\r\n        budget: ['', Validators.min(1)],\r\n        revenue: ['', Validators.min(1)],\r\n        runtime: ['', [Validators.min(1), Validators.max(300)]],\r\n        country: ['', [Validators.minLength(1), Validators.maxLength(50)]],\r\n        popularity: [1, [Validators.min(1), Validators.max(100)]],\r\n        certification: ['pg'],\r\n        release_date: [''],\r\n        allow_update: [true],\r\n    });\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private fb: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private uploadQueue: UploadQueueService,\r\n        private settings: Settings,\r\n        private router: Router,\r\n        private titles: TitlesService,\r\n        private toast: Toast,\r\n    ) {\r\n        this.certificationOptions = this.settings.getJson('browse.ageRatings');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.store.dispatch(new LoadSelectOptions());\r\n\r\n        this.store.select(CrupdateTitleState.title)\r\n            .pipe(filter(t => !!t.id), take(1))\r\n            .subscribe(title => {\r\n                this.form.patchValue({\r\n                    ...title,\r\n                    release_date: title.release_date ? title.release_date.split(' ')[0] : null,\r\n                });\r\n                this.poster$.next(title.poster);\r\n            });\r\n\r\n        this.form.get('poster').valueChanges.subscribe(value => {\r\n            this.poster$.next(value);\r\n        });\r\n    }\r\n\r\n    public uploadImage(type: 'poster'|'backdrop') {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                uri: 'uploads/images',\r\n                httpParams: {\r\n                    diskPrefix: `media-images/${type}s`\r\n                },\r\n            };\r\n            this.uploadQueue.start(upload, params).subscribe(fileEntry => {\r\n                this.form.patchValue({\r\n                    [type]: fileEntry.fileEntry.url\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public submit() {\r\n        this.store.dispatch(new ToggleLoading(true));\r\n        const titleId = this.store.selectSnapshot(CrupdateTitleState.title).id;\r\n        const request = titleId ?\r\n            this.titles.update(titleId, this.form.value) :\r\n            this.titles.create(this.form.value);\r\n        request\r\n            .pipe(finalize(() => this.store.dispatch(new ToggleLoading(false))))\r\n            .subscribe(() => {\r\n            this.toast.open(titleId ? MESSAGES.TITLE_UPDATE_SUCCESS : MESSAGES.TITLE_CREATE_SUCCESS);\r\n            if (titleId) {\r\n                this.router.navigate([this.router.url.includes('admin') ? 'admin/titles' : this.router.url.split('?')[0].replace('/edit', '')]);\r\n            } else {\r\n                this.router.navigate(['edit']);\r\n            }\r\n        });\r\n    }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.credit\" trans>Edit</h2>\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.credit\" trans>Create</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\"><mat-icon svgIcon=\"close\"></mat-icon></button>\r\n</div>\r\n\r\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"form\" ngNativeValidate>\r\n    <mat-dialog-content class=\"many-inputs\">\r\n        <div class=\"input-container\" *ngIf=\"data.credit\">\r\n            <label for=\"name\" trans>Person</label>\r\n            <input type=\"text\" id=\"name\" [value]=\"credit?.name\" disabled>\r\n        </div>\r\n\r\n        <search-input\r\n                *ngIf=\"!data.credit\"\r\n                placeholder=\"Search for a person...\"\r\n                label=\"Person\"\r\n                [type]=\"getPersonType()\"\r\n                [resetInputOnSelect]=\"false\"\r\n                searchProvider=\"local\"\r\n                (resultSelected)=\"setCredit($event)\"\r\n        ></search-input>\r\n\r\n        <div class=\"input-container\" *ngIf=\"data.type === 'cast'\">\r\n            <label for=\"character\" trans>Character</label>\r\n            <input type=\"text\" id=\"character\" formControlName=\"character\" required>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"data.type === 'crew'\">\r\n            <div class=\"input-container\">\r\n                <label for=\"job\" trans>Job</label>\r\n                <input type=\"text\" id=\"job\" formControlName=\"job\" [matAutocomplete]=\"auto\" required>\r\n            </div>\r\n            <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"jobSelected($event)\">\r\n                <mat-option *ngFor=\"let value of filteredJobs | async\" [value]=\"value.job\" class=\"multiline-mat-menu-item\">\r\n                    <div class=\"title\"><span trans>Job</span>: {{value.job}}</div>\r\n                    <div class=\"description\"><span trans>Department</span>: {{value.department}}</div>\r\n                </mat-option>\r\n            </mat-autocomplete>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"department\" trans>Department</label>\r\n                <input type=\"text\" id=\"department\" formControlName=\"department\" required>\r\n            </div>\r\n        </ng-container>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Save</button>\r\n    </mat-dialog-actions>\r\n</form>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Inject,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {TitleCredit} from '../../../../../../models/title';\r\nimport {Observable} from 'rxjs';\r\nimport {FormBuilder} from '@angular/forms';\r\nimport {Actions, Select, Store} from '@ngxs/store';\r\nimport {AddCredit, UpdateCredit} from '../../state/crupdate-title-actions';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {Creditable} from '../../../../../people/creditable';\r\nimport {MEDIA_TYPE} from '../../../../../media-type';\r\nimport {ValueLists} from '../../../../../../../common/core/services/value-lists.service';\r\nimport {filter, map, startWith} from 'rxjs/operators';\r\nimport {MatAutocompleteSelectedEvent} from '@angular/material/autocomplete';\r\nimport {BackendErrorResponse} from '../../../../../../../common/core/types/backend-error-response';\r\n\r\ninterface CrupdateCreditModalData {\r\n    credit?: TitleCredit;\r\n    type: 'cast'|'crew';\r\n    mediaItem: Creditable;\r\n}\r\n\r\ninterface JobList {\r\n    department: string;\r\n    jobs: string[];\r\n}\r\n\r\n@Component({\r\n    selector: 'crupdate-credit-modal',\r\n    templateUrl: './crupdate-credit-modal.component.html',\r\n    styleUrls: ['./crupdate-credit-modal.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CrupdateCreditModalComponent implements OnInit {\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public credit: TitleCredit;\r\n\r\n    public form = this.fb.group({\r\n        character: [''],\r\n        department: [''],\r\n        job: [''],\r\n    });\r\n\r\n    public availableJobs: {job: string, department: string}[] = [];\r\n    public filteredJobs: Observable<{job: string, department: string}[]>;\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private fb: FormBuilder,\r\n        private actions$: Actions,\r\n        private dialogRef: MatDialogRef<CrupdateCreditModalComponent>,\r\n        private valueLists: ValueLists,\r\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCreditModalData,\r\n    ) {\r\n        if (this.data.credit) {\r\n            this.credit = this.data.credit;\r\n            this.form.patchValue(this.data.credit.pivot);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.valueLists.get(['tmdbJobs']).subscribe(response => {\r\n            this.availableJobs = [];\r\n            (response.tmdbJobs as JobList[]).forEach(jobGroup => {\r\n                const jobs = jobGroup.jobs.map(jobName => {\r\n                    return {job: jobName, department: jobGroup.department};\r\n                });\r\n                this.availableJobs = [...this.availableJobs, ...jobs];\r\n            });\r\n\r\n            this.filteredJobs = this.form.get('job').valueChanges\r\n                .pipe(\r\n                    startWith(''),\r\n                    map(q => this.availableJobs.filter(v => {\r\n                        q = q.toLowerCase();\r\n                        return !q || v.job.toLowerCase().includes(q) || v.department.toLowerCase().includes(q);\r\n                    }).slice(0, 10))\r\n                );\r\n        });\r\n    }\r\n\r\n    public confirm() {\r\n        const action = this.data.credit\r\n            ? new UpdateCredit(this.credit.pivot.id, this.getPayload())\r\n            : new AddCredit(this.credit?.id, this.data.mediaItem, this.getPayload());\r\n        this.store.dispatch(action).subscribe(() => {\r\n            this.close();\r\n            this.toast.open(this.data.credit ? MESSAGES.CREDIT_UPDATE_SUCCESS : MESSAGES.CREDIT_ADD_SUCCESS);\r\n        }, (errResponse: BackendErrorResponse) => {\r\n            this.toast.open(errResponse.message);\r\n        });\r\n    }\r\n\r\n    public close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    public setCredit(credit: TitleCredit) {\r\n        this.credit = credit;\r\n    }\r\n\r\n    private getPayload() {\r\n        const payload = this.form.value;\r\n        if (this.data.type === 'cast') {\r\n            payload.department = 'cast';\r\n            payload.job = 'cast';\r\n        }\r\n        return payload;\r\n    }\r\n\r\n    public getPersonType() {\r\n        return MEDIA_TYPE.PERSON;\r\n    }\r\n\r\n    public jobSelected(e: MatAutocompleteSelectedEvent) {\r\n        const value = this.availableJobs.find(v => v.job === e.option.value);\r\n        this.form.patchValue({job: value.job, department: value.department});\r\n    }\r\n}\r\n","<div class=\"table-header\">\r\n    <div class=\"button-container\">\r\n        <button type=\"button\" mat-raised-button color=\"accent\" (click)=\"openCrupdateCreditModal()\" trans>Add Credit</button>\r\n    </div>\r\n\r\n    <div class=\"input-container\">\r\n        <input type=\"text\" (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Search...\" trans-placeholder>\r\n        <mat-icon svgIcon=\"search\"></mat-icon>\r\n    </div>\r\n</div>\r\n\r\n<mat-table [dataSource]=\"dataSource\" matSort cdkDropList (cdkDropListDropped)=\"changeCreditsOrder($event)\">\r\n    <ng-container matColumnDef=\"person\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header trans>Person</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let person\">\r\n            <button type=\"button\" mat-icon-button cdkDragHandle *ngIf=\"type === 'cast'\">\r\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\r\n            </button>\r\n            <media-image [src]=\"person.poster\" size=\"small\"></media-image>\r\n            <span>{{person.name}}</span>\r\n        </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"character\" *ngIf=\"type === 'cast'\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header trans>Character</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let person\"> {{person.pivot.character}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"type === 'crew'\">\r\n        <ng-container matColumnDef=\"department\">\r\n            <mat-header-cell *matHeaderCellDef mat-sort-header trans>Department</mat-header-cell>\r\n            <mat-cell *matCellDef=\"let person\"> {{person.pivot.department}} </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"job\">\r\n            <mat-header-cell *matHeaderCellDef mat-sort-header trans>Job</mat-header-cell>\r\n            <mat-cell *matCellDef=\"let person\"> {{person.pivot.job}} </mat-cell>\r\n        </ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"edit\">\r\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n        <mat-cell *matCellDef=\"let person\">\r\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateCreditModal(person)\">\r\n                <mat-icon svgIcon=\"edit\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" mat-icon-button (click)=\"detachCredit(person)\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n        </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"type === 'cast' ? castColumns : crewColumns\"></mat-header-row>\r\n    <mat-row cdkDrag *matRowDef=\"let myRowData; columns: type === 'cast' ? castColumns : crewColumns\">\r\n        <span *cdkDragPreview></span>\r\n    </mat-row>\r\n</mat-table>\r\n\r\n<no-results-message *ngIf=\"!dataSource.data.length\">\r\n    <span primary-text trans>Nothing to Display.</span>\r\n    <span secondary-text trans>There are no credits attached yet.</span>\r\n</no-results-message>","import {\r\n    Component,\r\n    ViewEncapsulation,\r\n    ChangeDetectionStrategy,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChange,\r\n    ViewChild, OnInit\r\n} from '@angular/core';\r\nimport {Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {TitleCredit} from '../../../../../../models/title';\r\nimport {CrupdateCreditModalComponent} from '../crupdate-credit-modal/crupdate-credit-modal.component';\r\nimport {ChangeCreditOrder, RemoveCredit} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\r\nimport {Person} from '../../../../../../models/person';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport {Creditable} from '../../../../../people/creditable';\r\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\n@Component({\r\n    selector: 'credits-panel',\r\n    templateUrl: './credits-panel.component.html',\r\n    styleUrls: ['./credits-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CreditsPanelComponent implements OnChanges, OnInit {\r\n    @ViewChild(MatSort, {static: true}) matSort: MatSort;\r\n    @Input() mediaItem: Creditable;\r\n    @Input() type: 'cast'|'crew';\r\n\r\n    public castColumns = ['person', 'character', 'edit'];\r\n    public crewColumns = ['person', 'department', 'job', 'edit'];\r\n    public dataSource = new MatTableDataSource();\r\n\r\n    constructor(\r\n        private dialog: Modal,\r\n        private store: Store,\r\n        private toast: Toast,\r\n    ) {}\r\n\r\n    ngOnInit () {\r\n        this.dataSource.sort = this.matSort;\r\n        this.dataSource.sortingDataAccessor = (item: TitleCredit, property) => {\r\n            switch (property) {\r\n                case 'person':\r\n                    return item.name;\r\n                default:\r\n                    return item.pivot[property];\r\n            }\r\n        };\r\n    }\r\n\r\n    ngOnChanges(changes: {mediaItem?: SimpleChange}) {\r\n        if (changes.mediaItem && changes.mediaItem.currentValue) {\r\n            this.dataSource.data = this.type === 'cast' ?\r\n                this.getCast(this.mediaItem.credits) :\r\n                this.getCrew(this.mediaItem.credits);\r\n        }\r\n    }\r\n\r\n    public openCrupdateCreditModal(credit?: TitleCredit) {\r\n        this.dialog.open(\r\n            CrupdateCreditModalComponent,\r\n            {credit, type: this.type, mediaItem: this.mediaItem}\r\n        );\r\n    }\r\n\r\n    public detachCredit(credit: TitleCredit) {\r\n        this.dialog.open(ConfirmModalComponent, {\r\n            title: 'Remove Credit',\r\n            body:  'Are you sure you want to remove this credit?',\r\n            ok:    'Remove'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.store.dispatch(new RemoveCredit(this.mediaItem, credit)).subscribe(() => {\r\n                this.toast.open(MESSAGES.CREDIT_REMOVE_SUCCESS);\r\n            });\r\n        });\r\n    }\r\n\r\n    public changeCreditsOrder(e: CdkDragDrop<Person>) {\r\n        if (this.store.selectSnapshot(CrupdateTitleState.loading)) return;\r\n        this.store.dispatch(new ChangeCreditOrder(this.mediaItem, e.previousIndex, e.currentIndex, this.type));\r\n    }\r\n\r\n    public applyFilter(value: string) {\r\n        this.dataSource.filter = value;\r\n    }\r\n\r\n    public getCast(credits: TitleCredit[]) {\r\n        if ( ! credits) return [];\r\n        return credits.filter(credit => credit.pivot.department === 'cast');\r\n    }\r\n\r\n    public getCrew(credits: TitleCredit[]) {\r\n        if ( ! credits) return [];\r\n        return credits.filter(credit => credit.pivot.department !== 'cast');\r\n    }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.episode\" trans>Edit Episode</h2>\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.episode\" trans>Create Episode</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"episodeForm\" ngNativeValidate>\r\n    <mat-dialog-content>\r\n        <mat-tab-group [dynamicHeight]=\"true\" animationDuration=\"0ms\" color=\"accent\">\r\n            <mat-tab [label]=\"'Primary Facts' | trans\">\r\n                <div class=\"many-inputs primary-facts-panel\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"name\" trans>Title</label>\r\n                        <input type=\"text\" formControlName=\"name\" id=\"name\" minlength=\"1\" maxlength=\"250\" required>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"episode_number\" trans>Number</label>\r\n                        <input type=\"number\" formControlName=\"episode_number\" id=\"episode_number\" min=\"1\" required>\r\n                        <div class=\"error\" *ngIf=\"(errors$ | async).episode_number as epNumError\">{{epNumError}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"poster\" trans>Poster</label>\r\n                        <div class=\"input-with-action action-left\">\r\n                            <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadPoster()\"\r\n                                    [matTooltip]=\"'Upload poster' | trans\">\r\n                                <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                            </button>\r\n                            <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"release_date\" trans>Release Date</label>\r\n                        <input type=\"date\" formControlName=\"release_date\" id=\"release_date\" required>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"description\" trans>Overview</label>\r\n                        <textarea type=\"text\" formControlName=\"description\" id=\"description\" minlength=\"1\"\r\n                                  cdkTextareaAutosize cdkAutosizeMinRows=\"6\"></textarea>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"popularity\" trans>Popularity</label>\r\n                        <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\">\r\n                    </div>\r\n                </div>\r\n            </mat-tab>\r\n            <mat-tab [label]=\"'Cast' | trans\" [disabled]=\"!data.episode\">\r\n                <credits-panel [mediaItem]=\"episode$ | async\" type=\"cast\"></credits-panel>\r\n            </mat-tab>\r\n            <mat-tab [label]=\"'Crew' | trans\" [disabled]=\"!data.episode\">\r\n                <credits-panel [mediaItem]=\"episode$ | async\" type=\"crew\"></credits-panel>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Save</button>\r\n    </mat-dialog-actions>\r\n</form>","import {Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy, Inject} from '@angular/core';\r\nimport {Episode} from '../../../../../../../models/episode';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../../state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {FormBuilder, Validators} from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport {CreateEpisode, LoadEpisodeCredits, UpdateEpisode} from '../../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../../toast-messages';\r\nimport {Season} from '../../../../../../../models/season';\r\nimport {UploadQueueService} from '../../../../../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {Toast} from '../../../../../../../../common/core/ui/toast.service';\r\nimport {openUploadWindow} from '../../../../../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../../../../../common/uploads/upload-input-config';\r\nimport {BackendErrorResponse} from '../../../../../../../../common/core/types/backend-error-response';\r\n\r\ninterface CrupdateEpisodeModalData {\r\n    episode?: Episode;\r\n    season?: Season;\r\n}\r\n\r\n@Component({\r\n    selector: 'crupdate-episode-modal',\r\n    templateUrl: './crupdate-episode-modal.component.html',\r\n    styleUrls: ['./crupdate-episode-modal.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [UploadQueueService],\r\n})\r\nexport class CrupdateEpisodeModalComponent implements OnInit {\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public episode$: BehaviorSubject<Episode> = new BehaviorSubject(null);\r\n    public errors$: BehaviorSubject<{episode_number?: string}> = new BehaviorSubject({});\r\n\r\n    public episodeForm = this.fb.group({\r\n        name: ['', [Validators.required, Validators.minLength(1)]],\r\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        description: ['', [Validators.minLength(1)]],\r\n        popularity: [50, [Validators.min(1), Validators.max(1000)]],\r\n        release_date: [''],\r\n        episode_number: [''],\r\n    });\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private fb: FormBuilder,\r\n        private uploadQueue: UploadQueueService,\r\n        private dialogRef: MatDialogRef<CrupdateEpisodeModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateEpisodeModalData,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this.data.episode) {\r\n            this.bindToStoreEpisode();\r\n            this.episodeForm.patchValue({\r\n                ...this.episode$.value,\r\n                release_date: this.episode$.value.release_date.split(' ')[0]\r\n            });\r\n            setTimeout(() => this.loadEpisodeCredits());\r\n        } else {\r\n            const epNum = this.data.season ? this.data.season.episode_count + 1 : 1;\r\n            this.episodeForm.patchValue({episode_number: epNum});\r\n        }\r\n    }\r\n\r\n    public confirm() {\r\n        if (this.data.episode) {\r\n            this.updateEpisode();\r\n        } else {\r\n            this.createEpisode();\r\n        }\r\n    }\r\n\r\n    public close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    private createEpisode() {\r\n        this.store.dispatch(new CreateEpisode(this.data.season, this.episodeForm.value))\r\n            .subscribe(() => {\r\n                this.errors$.next({});\r\n                this.toast.open(MESSAGES.EPISODE_CREATE_SUCCESS);\r\n                const episodes = this.store.selectSnapshot(CrupdateTitleState.seasons)\r\n                    .find(s => s.id === this.data.season.id).episodes;\r\n                this.data.episode = episodes[episodes.length - 1];\r\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\r\n    }\r\n\r\n    private updateEpisode() {\r\n        this.store.dispatch(new UpdateEpisode(this.data.episode, this.episodeForm.value))\r\n            .subscribe(() => {\r\n                this.errors$.next({});\r\n                this.toast.open(MESSAGES.EPISODE_UPDATE_SUCCESS);\r\n                this.close();\r\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\r\n    }\r\n\r\n    public uploadPoster() {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                uri: 'uploads/images',\r\n                httpParams: {\r\n                    diskPrefix: 'media-images/posters'\r\n                },\r\n            };\r\n            this.uploadQueue.start(upload, params).subscribe(response => {\r\n                this.episodeForm.patchValue({\r\n                    poster: response.fileEntry.url\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private bindToStoreEpisode() {\r\n        this.store.select(CrupdateTitleState.title)\r\n            .subscribe(title => {\r\n               if (title.seasons) {\r\n                   const episode = title.seasons.find(s => s.number === this.data.episode.season_number)\r\n                       .episodes.find(e => e.episode_number === this.data.episode.episode_number);\r\n                   this.episode$.next({...episode});\r\n               }\r\n            });\r\n    }\r\n\r\n    private loadEpisodeCredits() {\r\n        if ( ! this.data.episode.credits) {\r\n            this.store.dispatch(new LoadEpisodeCredits(this.episode$.value)).toPromise();\r\n        }\r\n    }\r\n}\r\n","<div class=\"table-header\">\r\n    <div class=\"button-container\">\r\n        <button mat-raised-button color=\"accent\" (click)=\"openCrupdateEpisodeModal()\" trans>Add Episode</button>\r\n    </div>\r\n\r\n    <div class=\"input-container\">\r\n        <input type=\"text\" (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Search...\" trans-placeholder>\r\n        <mat-icon svgIcon=\"search\"></mat-icon>\r\n    </div>\r\n</div>\r\n\r\n<mat-table [dataSource]=\"dataSource\" [trackBy]=\"trackByFn\">\r\n    <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef trans>Name</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let episode\">\r\n            <media-image [src]=\"episode.poster\" [alt]=\"episode.name\" size=\"small\"></media-image>\r\n            <span>{{episode.name}}</span>\r\n        </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"number\">\r\n        <mat-header-cell *matHeaderCellDef trans>Number</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let episode\"> {{episode.episode_number}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"release-date\">\r\n        <mat-header-cell *matHeaderCellDef trans>Release Date</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let episode\"> {{episode.release_date | formattedDate}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"edit\">\r\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n        <mat-cell *matCellDef=\"let episode\">\r\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateEpisodeModal(episode)\">\r\n                <mat-icon svgIcon=\"edit\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" mat-icon-button (click)=\"deleteEpisode(episode)\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n        </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"['name', 'number', 'release-date', 'edit']\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let myRowData; columns: ['name', 'number', 'release-date', 'edit']\"></mat-row>\r\n</mat-table>\r\n\r\n<no-results-message *ngIf=\"!dataSource.data.length\">\r\n    <span primary-text trans>Nothing to Display.</span>\r\n    <span secondary-text trans>This season does not have any episodes yet.</span>\r\n</no-results-message>","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    SimpleChange,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Episode} from '../../../../../../models/episode';\r\nimport {DeleteEpisode} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {CrupdateEpisodeModalComponent} from '../seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\r\nimport {Store} from '@ngxs/store';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {Season} from '../../../../../../models/season';\r\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {ActivatedRoute} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'episodes-panel',\r\n    templateUrl: './episodes-panel.component.html',\r\n    styleUrls: ['./episodes-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EpisodesPanelComponent implements OnInit, OnChanges, AfterViewInit {\r\n    @ViewChild(MatSort, {static: true}) matSort: MatSort;\r\n    @Input() season: Season;\r\n    public dataSource = new MatTableDataSource([]);\r\n\r\n    public trackByFn = (i: number, episode: Episode) => episode.id;\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private dialog: Modal,\r\n        private toast: Toast,\r\n        private route: ActivatedRoute,\r\n    ) {}\r\n\r\n    ngOnInit () {\r\n        this.dataSource.sort = this.matSort;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        const episodeNum = +this.route.snapshot.params.episodeNumber;\r\n        if (episodeNum) {\r\n            const episode = this.season.episodes.find(e => e.episode_number === episodeNum);\r\n            episode && this.openCrupdateEpisodeModal(episode);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: {season?: SimpleChange}) {\r\n        if (changes.season.currentValue && changes.season.currentValue.episodes) {\r\n            this.dataSource.data = this.season.episodes;\r\n        }\r\n    }\r\n\r\n    public deleteEpisode(episode: Episode) {\r\n        this.dialog.open(ConfirmModalComponent, {\r\n            title: 'Delete Episode',\r\n            body:  'Are you sure you want to delete this episode?',\r\n            ok:    'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.store.dispatch(new DeleteEpisode(episode)).subscribe(() => {\r\n                this.toast.open(MESSAGES.EPISODE_DELETE_SUCCESS);\r\n            });\r\n        });\r\n    }\r\n\r\n    public openCrupdateEpisodeModal(episode?: Episode) {\r\n        this.dialog.open(\r\n            CrupdateEpisodeModalComponent,\r\n            {episode, season: this.season},\r\n            {panelClass: 'crupdate-episode-modal-container'}\r\n        );\r\n    }\r\n\r\n    public applyFilter(value: string) {\r\n        this.dataSource.filter = value;\r\n    }\r\n}\r\n","<ng-container *ngIf=\"seasons$ | async as seasons\">\r\n    <div class=\"header\">\r\n        <button type=\"button\" mat-raised-button color=\"accent\" (click)=\"addSeason()\" [disabled]=\"loading$ | async\">Add Season</button>\r\n    </div>\r\n\r\n    <mat-accordion>\r\n        <mat-expansion-panel [expanded]=\"(activeSeason$ | async) === season.number\" class=\"mat-elevation-z0\" [ngClass]=\"'season-' + season.number + '-panel'\" *ngFor=\"let season of seasons; trackBy: trackByFn\">\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    <span trans>Season</span>\r\n                    &nbsp;\r\n                    <span>{{season.number}}</span>\r\n                </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n\r\n            <ng-template matExpansionPanelContent>\r\n                <mat-tab-group animationDuration=\"0ms\" color=\"accent\">\r\n                    <mat-tab [label]=\"'Episodes' | trans\">\r\n                        <episodes-panel [season]=\"season\"></episodes-panel>\r\n                    </mat-tab>\r\n                    <mat-tab [label]=\"'Regular Cast' | trans\">\r\n                        <credits-panel type=\"cast\" [mediaItem]=\"season\"></credits-panel>\r\n                    </mat-tab>\r\n                    <mat-tab [label]=\"'Regular Crew' | trans\">\r\n                        <credits-panel type=\"crew\" [mediaItem]=\"season\"></credits-panel>\r\n                    </mat-tab>\r\n                </mat-tab-group>\r\n            </ng-template>\r\n\r\n            <mat-action-row>\r\n                <button type=\"button\" mat-button (click)=\"maybeDeleteSeason(season)\" trans>Delete</button>\r\n            </mat-action-row>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n\r\n    <no-results-message *ngIf=\"!seasons.length\">\r\n        <span primary-text trans>Nothing to Display.</span>\r\n        <span secondary-text trans>This series does not have any seasons yet.</span>\r\n    </no-results-message>\r\n</ng-container>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Season} from '../../../../../../models/season';\r\nimport {CreateSeason, DeleteSeason} from '../../state/crupdate-title-actions';\r\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\r\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {ActivatedRoute} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'seasons-panel',\r\n    templateUrl: './seasons-panel.component.html',\r\n    styleUrls: ['./seasons-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SeasonsPanelComponent implements OnInit, AfterViewInit {\r\n    @Select(CrupdateTitleState.seasons) seasons$: Observable<Season[]>;\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public activeSeason$ = new BehaviorSubject<number>(1);\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private modal: Modal,\r\n        private toast: Toast,\r\n        private route: ActivatedRoute,\r\n        private el: ElementRef<HTMLElement>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.activeSeason$.next(+this.route.snapshot.params.seasonNumber || 1);\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n       setTimeout(() => {\r\n           if (this.activeSeason$.value > 1) {\r\n               this.el.nativeElement.querySelector(`.season-${this.activeSeason$.value}-panel`)\r\n                   ?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\r\n           }\r\n       });\r\n    }\r\n\r\n    public addSeason() {\r\n        this.store.dispatch(new CreateSeason()).subscribe(() => {\r\n            this.toast.open(MESSAGES.SEASON_CREATE_SUCCESS);\r\n        });\r\n    }\r\n\r\n    public maybeDeleteSeason(season: Season) {\r\n        this.modal.open(ConfirmModalComponent, {\r\n            title: 'Delete Season',\r\n            body:  'Are you sure you want to delete this season?',\r\n            bodyBold: 'This will also delete all episodes attached to this season.',\r\n            ok:    'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.store.dispatch(new DeleteSeason(season)).subscribe(() => {\r\n                this.toast.open(MESSAGES.SEASON_DELETE_SUCCESS);\r\n            });\r\n        });\r\n    }\r\n\r\n    trackByFn(index: number, season: Season) {\r\n        return season.id;\r\n    }\r\n}\r\n","<button mat-raised-button color=\"accent\" (click)=\"uploadImage()\">\r\n    <mat-icon svgIcon=\"add\"></mat-icon>\r\n    <span trans>Upload Image</span>\r\n</button>\r\n\r\n<div cdkDropListGroup>\r\n    <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\"></div>\r\n    <div class=\"images-grid\">\r\n        <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\" *ngFor=\"let image of images$ | async\">\r\n            <media-image class=\"images-panel-media-image\" cdkDrag (cdkDragMoved)=\"dragMoved($event);\" [src]=\"image.url\" size=\"medium\" mode=\"landscape\">\r\n                <button mat-mini-fab color=\"warn\" (click)=\"deleteImage(image)\">\r\n                    <mat-icon svgIcon=\"delete\"></mat-icon>\r\n                </button>\r\n            </media-image>\r\n        </div>\r\n    </div>\r\n</div>","import {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {Observable} from 'rxjs';\r\nimport {Image} from '../../../../../../models/image';\r\nimport {ImagesService} from '../../../../../shared/images.service';\r\nimport {AddImage, ChangeImageOrder, DeleteImage} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {CdkDrag, CdkDragMove, CdkDropList, CdkDropListGroup} from '@angular/cdk/drag-drop';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\r\nimport {ViewportRuler} from '@angular/cdk/overlay';\r\n\r\n@Component({\r\n    selector: 'images-panel',\r\n    templateUrl: './images-panel.component.html',\r\n    styleUrls: ['./images-panel.component.scss'],\r\n    providers: [UploadQueueService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ImagesPanelComponent {\r\n    @Select(CrupdateTitleState.images) images$: Observable<Image[]>;\r\n\r\n    @ViewChild(CdkDropListGroup) listGroup: CdkDropListGroup<CdkDropList>;\r\n    @ViewChild(CdkDropList) placeholder: CdkDropList;\r\n\r\n    public target: CdkDropList;\r\n    public targetIndex: number;\r\n    public source: CdkDropList;\r\n    public sourceIndex: number;\r\n    public activeContainer;\r\n\r\n    constructor(\r\n        private images: ImagesService,\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private viewportRuler: ViewportRuler,\r\n    ) {}\r\n\r\n    public uploadImage() {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                modelId: this.store.selectSnapshot(CrupdateTitleState.title).id\r\n            };\r\n            this.images.create(upload[0], params)\r\n                .subscribe(response => {\r\n                    this.store.dispatch(new AddImage(response.image)).subscribe(() => {\r\n                        this.toast.open(MESSAGES.IMAGE_CREATE_SUCCESS);\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    public deleteImage(image: Image) {\r\n        this.store.dispatch(new DeleteImage(image)).subscribe(() => {\r\n            this.toast.open(MESSAGES.IMAGE_DELETE_SUCCESS);\r\n        });\r\n    }\r\n\r\n    /* GRID DRAG AND DROP */\r\n\r\n    dragMoved(e: CdkDragMove) {\r\n        const point = this.getPointerPositionOnPage(e.event);\r\n        this.listGroup._items.forEach(dropList => {\r\n            if (__isInsideDropListClientRect(dropList, point.x, point.y)) {\r\n                this.activeContainer = dropList;\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    dropListDropped() {\r\n        if ( ! this.target) return;\r\n\r\n        const phElement = this.placeholder.element.nativeElement;\r\n        const parent = phElement.parentElement;\r\n\r\n        phElement.style.display = 'none';\r\n\r\n        parent.removeChild(phElement);\r\n        parent.appendChild(phElement);\r\n        parent.insertBefore(this.source.element.nativeElement, parent.children[this.sourceIndex]);\r\n\r\n        this.target = null;\r\n        this.source = null;\r\n\r\n        if (this.sourceIndex !== this.targetIndex) {\r\n            this.store.dispatch(new ChangeImageOrder(this.sourceIndex, this.targetIndex));\r\n        }\r\n    }\r\n\r\n    dropListEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\r\n        if (drop === this.placeholder) return true;\r\n\r\n\r\n        if (drop !== this.activeContainer) return false;\r\n\r\n        const phElement = this.placeholder.element.nativeElement;\r\n        const sourceElement = drag.dropContainer.element.nativeElement;\r\n        const dropElement = drop.element.nativeElement;\r\n\r\n        const dragIndex = __indexOf(dropElement.parentElement.children, (this.source ? phElement : sourceElement));\r\n        const dropIndex = __indexOf(dropElement.parentElement.children, dropElement);\r\n\r\n        if ( ! this.source) {\r\n            this.sourceIndex = dragIndex;\r\n            this.source = drag.dropContainer;\r\n\r\n            phElement.style.width = sourceElement.clientWidth + 'px';\r\n            phElement.style.height = sourceElement.clientHeight + 'px';\r\n\r\n            sourceElement.parentElement.removeChild(sourceElement);\r\n        }\r\n\r\n        this.targetIndex = dropIndex;\r\n        this.target = drop;\r\n\r\n        phElement.style.display = '';\r\n        dropElement.parentElement.insertBefore(phElement, (dropIndex > dragIndex\r\n            ? dropElement.nextSibling : dropElement));\r\n\r\n        this.placeholder._dropListRef.enter(drag._dragRef, drag.element.nativeElement.offsetLeft, drag.element.nativeElement.offsetTop);\r\n        return false;\r\n    }\r\n\r\n    /** Determines the point of the page that was touched by the user. */\r\n    getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\r\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n        const point = __isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\r\n        const scrollPosition = this.viewportRuler.getViewportScrollPosition();\r\n\r\n        return {\r\n            x: point.pageX - scrollPosition.left,\r\n            y: point.pageY - scrollPosition.top\r\n        };\r\n    }\r\n}\r\n\r\nfunction __indexOf(collection, node) {\r\n    return Array.prototype.indexOf.call(collection, node);\r\n}\r\n\r\n/** Determines whether an event is a touch event. */\r\nfunction __isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n    return event.type.startsWith('touch');\r\n}\r\n\r\nfunction __isInsideDropListClientRect(dropList: CdkDropList, x: number, y: number) {\r\n    const {top, bottom, left, right} = dropList.element.nativeElement.getBoundingClientRect();\r\n    return y >= top && y <= bottom && x >= left && x <= right;\r\n}\r\n","<form class=\"input-container\" *ngIf=\"!readonly\" ngNativeValidate (ngSubmit)=\"selectTagsFromString(formControl.value)\">\r\n    <div class=\"input-with-action\">\r\n        <input type=\"text\" class=\"tags-string-input\" [matAutocomplete]=\"auto\" [formControl]=\"formControl\" required>\r\n        <button type=\"submit\" class=\"add-tags-button\" mat-flat-button color=\"accent\" trans>Add</button>\r\n    </div>\r\n</form>\r\n\r\n<p class=\"main-info\" *ngIf=\"!readonly\" [transValues]=\"{tagName: pluralName}\" trans>Separate :tagName with comma.</p>\r\n\r\n<div class=\"selected-tags\">\r\n    <mat-chip-list [selectable]=\"false\">\r\n        <mat-chip (removed)=\"deselectTag(tag)\" [removable]=\"!readonly\" *ngFor=\"let tag of selectedTags$ | async\">\r\n            <span>{{tag}}</span>\r\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\r\n        </mat-chip>\r\n    </mat-chip-list>\r\n</div>\r\n\r\n<div class=\"existing-tags\" *ngIf=\"!readonly\">\r\n    <p [transValues]=\"{tagName: pluralName}\" trans>Choose from existing :tagName:</p>\r\n    <div class=\"existing-tags-list\">\r\n        <div class=\"existing-tag-name\" *ngFor=\"let tag of existingTags$ | async\" (click)=\"selectTags([tag.name])\">{{tag.display_name}}</div>\r\n    </div>\r\n</div>\r\n\r\n<mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selectTags([$event.option.value])\">\r\n    <mat-option *ngFor=\"let tag of suggestedTags$ | async\" [value]=\"tag.name\">{{tag.display_name}}</mat-option>\r\n</mat-autocomplete>\r\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {Tag} from '@common/core/types/models/Tag';\r\nimport {TagsService} from '@common/core/services/tags.service';\r\nimport {slugifyString} from '@common/core/utils/slugify-string';\r\n\r\n@Component({\r\n    selector: 'tags-manager',\r\n    templateUrl: './tags-manager.component.html',\r\n    styleUrls: ['./tags-manager.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: TagsManagerComponent,\r\n        multi: true,\r\n    }]\r\n})\r\nexport class TagsManagerComponent implements OnInit, ControlValueAccessor {\r\n    @Input() public readonly = false;\r\n    @Input() public tagType: string;\r\n    @Input() public pluralName = 'tags';\r\n\r\n    public formControl = new FormControl();\r\n    private propagateChange: Function;\r\n\r\n    /**\r\n     * Tags user has selected.\r\n     */\r\n    public selectedTags$ = new BehaviorSubject<string[]>([]);\r\n    /**\r\n     * A list of tags that already exist in the app.\r\n     */\r\n    public existingTags$ = new BehaviorSubject<Tag[]>([]);\r\n    /**\r\n     * Tags currently being suggested in autocomplete.\r\n     */\r\n    public suggestedTags$ = new BehaviorSubject<Tag[]>([]);\r\n\r\n    constructor(private tagService: TagsService) {}\r\n\r\n    ngOnInit() {\r\n        this.tagService.index({perPage: 15, type: this.tagType}).subscribe(response => {\r\n            this.existingTags$.next(response.pagination.data.filter(tag => tag.type !== 'status'));\r\n        });\r\n        this.formControl.valueChanges.subscribe(q => {\r\n            const suggestions = q ?\r\n                this.existingTags$.value.filter(t => t.name.toLowerCase().includes(q.toLowerCase())) :\r\n                [];\r\n            this.suggestedTags$.next(suggestions);\r\n        });\r\n    }\r\n\r\n    public writeValue(value: string[]) {\r\n        this.selectTags(value, false);\r\n    }\r\n\r\n    public registerOnChange(fn: Function) {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    public registerOnTouched() {}\r\n\r\n    public selectTags(tags?: string[], propagate = true) {\r\n        const newTags = (tags || []).map(t => t.trim())\r\n            .filter(t => !this.selectedTags$.value.includes(t));\r\n        if (newTags.length) {\r\n            this.selectedTags$.next([\r\n                ...this.selectedTags$.value,\r\n                ...newTags\r\n            ]);\r\n        }\r\n        this.formControl.reset();\r\n        if (propagate) {\r\n           this.propagateChange(this.selectedTags$.value);\r\n        }\r\n    }\r\n\r\n    public deselectTag(tagName: string) {\r\n        const selectedTags = this.selectedTags$.value.slice();\r\n        selectedTags.splice(selectedTags.indexOf(tagName), 1);\r\n        this.selectedTags$.next(selectedTags);\r\n        this.propagateChange(this.selectedTags$.value);\r\n    }\r\n\r\n    public selectTagsFromString(tagString: string) {\r\n        const tags = tagString.split(',').map(t => slugifyString(t));\r\n        this.selectTags(tags);\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\ninterface SelectTagsModalComponentData {\n    tagType?: string;\n    pluralName?: string;\n}\n\n@Component({\n    selector: 'tag-manager-modal',\n    templateUrl: './select-tags-modal.component.html',\n    styleUrls: ['./select-tags-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectTagsModalComponent {\n    public selectedTagsControl = new FormControl();\n    public pluralName: string;\n\n    constructor(\n        private dialogRef: MatDialogRef<SelectTagsModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: SelectTagsModalComponentData,\n    ) {\n        this.pluralName = this.data.pluralName || 'tags';\n    }\n\n    public close() {\n        this.dialogRef.close();\n    }\n\n    public confirm() {\n        this.dialogRef.close(this.selectedTagsControl.value);\n    }\n\n    public noTagsSelected(): boolean {\n        return !this.selectedTagsControl.value?.length;\n    }\n}\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title [transValues]=\"{tagName: pluralName}\" trans>Select :tagName</h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<mat-dialog-content>\n   <tags-manager [tagType]=\"data.tagType\" [pluralName]=\"pluralName\" [formControl]=\"selectedTagsControl\"></tags-manager>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" class=\"cancel-button\" mat-button trans>Cancel</button>\n    <button type=\"button\" class=\"submit-button\" [disabled]=\"noTagsSelected()\" (click)=\"confirm()\" mat-raised-button color=\"accent\" [transValues]=\"{tagName: pluralName}\" trans>Merge :tagName</button>\n</mat-dialog-actions>\n","<div class=\"table-header\">\r\n    <div class=\"button-container\">\r\n        <button mat-raised-button color=\"accent\" (click)=\"openTagManagerModal()\">\r\n            {{ 'Add' | trans }} {{ (displayType || (type + 's') ) | trans }}\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"input-container\">\r\n        <input type=\"text\" (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Search...\" trans-placeholder>\r\n        <mat-icon svgIcon=\"search\"></mat-icon>\r\n    </div>\r\n</div>\r\n\r\n<mat-table [dataSource]=\"dataSource\" matSort>\r\n    <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header trans>Name</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let tag\"> {{tag.name}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"display_name\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header trans>Display Name</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let tag\"> {{tag.display_name || '-'}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"edit\">\r\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n        <mat-cell *matCellDef=\"let tag\">\r\n            <button mat-icon-button (click)=\"detachTag(tag)\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n        </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"['name', 'display_name', 'edit']\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let myRowData; columns: ['name', 'display_name', 'edit']\"></mat-row>\r\n</mat-table>\r\n\r\n<no-results-message *ngIf=\"!dataSource.data?.length\">\r\n    <span primary-text trans>Nothing to Display.</span>\r\n    <span secondary-text trans>Attach new {{ displayType || type }} from above.</span>\r\n</no-results-message>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnInit,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {AttachTags, DetachTag} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {Tag} from '../../../../../../../common/core/types/models/Tag';\r\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {SelectTagsModalComponent} from '../../../../../../../common/tags/tags-manager/select-tags-modal/select-tags-modal.component';\r\n\r\n@Component({\r\n    selector: 'tags-panel',\r\n    templateUrl: './tags-panel.component.html',\r\n    styleUrls: ['./tags-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TagsPanelComponent implements OnInit {\r\n    @ViewChild(MatSort, {static: true}) matSort: MatSort;\r\n    @Input() type: 'keyword' | 'genre' | 'production_country';\r\n    @Input() displayType: string;\r\n    public dataSource = new MatTableDataSource();\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private modal: Modal,\r\n        private toast: Toast,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.dataSource.sort = this.matSort;\r\n        const tags$ = this.getTagObservable();\r\n\r\n        tags$.subscribe(tags => {\r\n            this.dataSource.data = tags || [];\r\n        });\r\n    }\r\n\r\n    public openTagManagerModal() {\r\n        this.modal.open(\r\n            SelectTagsModalComponent,\r\n            {tagType: this.type, pluralName: this.type === 'production_country' ? 'countries' : `${this.type}s`},\r\n        ).beforeClosed().subscribe(tagNames => {\r\n           if (tagNames && tagNames.length) {\r\n               this.store.dispatch(new AttachTags(tagNames, this.type));\r\n           }\r\n        });\r\n    }\r\n\r\n    public detachTag(tag: Tag) {\r\n        this.store.dispatch(new DetachTag(tag))\r\n            .subscribe(() => {\r\n                this.toast.open(MESSAGES.TAG_DETACH_SUCCESS);\r\n            });\r\n    }\r\n\r\n    public applyFilter(value: string) {\r\n        this.dataSource.filter = value;\r\n    }\r\n\r\n    private getTagObservable() {\r\n        if (this.type === 'keyword') {\r\n            return this.store.select(CrupdateTitleState.keywords);\r\n        } else if (this.type === 'genre') {\r\n            return this.store.select(CrupdateTitleState.genres);\r\n        } else {\r\n            return this.store.select(CrupdateTitleState.countries);\r\n        }\r\n    }\r\n}\r\n","<div matSort>\r\n    <data-table [dataSource]=\"dataSource\" *ngIf=\"dataSource\" itemsName=\"reviews\">\r\n        <button mat-raised-button color=\"accent\" (click)=\"openCrupdateReviewModal()\" *ngIf=\"currentUser.hasPermission('reviews.create')\" headerActions trans>Add</button>\r\n\r\n        <button mat-icon-button [matTooltip]=\"'Delete selected' | trans\" (click)=\"maybeDeleteSelectedReviews()\" headerSelectedActions *ngIf=\"currentUser.hasPermission('reviews.delete')\">\r\n            <mat-icon svgIcon=\"delete\"></mat-icon>\r\n        </button>\r\n\r\n        <ng-container matColumnDef=\"review\">\r\n            <mat-header-cell *matHeaderCellDef trans>Review</mat-header-cell>\r\n            <mat-cell *matCellDef=\"let review\"> {{review.body | slice:0:200}} </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"author\">\r\n            <mat-header-cell *matHeaderCellDef mat-sort-header trans>Author</mat-header-cell>\r\n            <mat-cell *matCellDef=\"let review\"> {{review.author ? review.author : '-'}} </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"score\">\r\n            <mat-header-cell *matHeaderCellDef mat-sort-header trans>Score</mat-header-cell>\r\n            <mat-cell *matCellDef=\"let review\"> {{review.score ? review.score : '-' }} </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"type\">\r\n            <mat-header-cell *matHeaderCellDef mat-sort-header trans>type</mat-header-cell>\r\n            <mat-cell *matCellDef=\"let review\"> {{review.type}} </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"edit\">\r\n            <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n            <mat-cell *matCellDef=\"let review\">\r\n                <button mat-icon-button (click)=\"openCrupdateReviewModal(review)\" *ngIf=\"currentUser.hasPermission('reviews.update')\">\r\n                    <mat-icon svgIcon=\"edit\"></mat-icon>\r\n                </button>\r\n            </mat-cell>\r\n        </ng-container>\r\n    </data-table>\r\n</div>","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit, ViewChild, ViewEncapsulation} from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport {Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {Review} from '../../../../../../models/review';\r\nimport {CrupdateReviewModalComponent} from '../../../../../reviews/crupdate-review-modal/crupdate-review-modal.component';\r\nimport {ReviewService} from '../../../../../shared/review.service';\r\nimport {PaginatedDataTableSource} from '../../../../../../../common/shared/data-table/data/paginated-data-table-source';\r\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {CurrentUser} from '../../../../../../../common/auth/current-user';\r\nimport {Paginator} from '../../../../../../../common/shared/paginator.service';\r\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\n@Component({\r\n    selector: 'reviews-panel',\r\n    templateUrl: './reviews-panel.component.html',\r\n    styleUrls: ['./reviews-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [Paginator],\r\n})\r\nexport class ReviewsPanelComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatSort, {static: true}) matSort: MatSort;\r\n    public dataSource: PaginatedDataTableSource<Review>;\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private modal: Modal,\r\n        private toast: Toast,\r\n        private reviews: ReviewService,\r\n        public paginator: Paginator<Review>,\r\n        public currentUser: CurrentUser,\r\n    ) {\r\n        paginator.dontUpdateQueryParams = true;\r\n    }\r\n\r\n    ngOnInit() {\r\n        const title =  this.store.selectSnapshot(CrupdateTitleState.title);\r\n        this.dataSource = new PaginatedDataTableSource<Review>({\r\n            uri: 'reviews',\r\n            dataPaginator: this.paginator,\r\n            matSort: this.matSort,\r\n            staticParams: {compact: true, titleId: title.id},\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.paginator.destroy();\r\n    }\r\n\r\n    public openCrupdateReviewModal(review?: Review) {\r\n        const mediaId = this.store.selectSnapshot(CrupdateTitleState.title).id;\r\n        this.modal.open(\r\n            CrupdateReviewModalComponent,\r\n            {review, mediaId},\r\n            {panelClass: 'crupdate-review-modal-container'}\r\n        ).beforeClosed().subscribe(newReview => {\r\n            if (newReview) {\r\n                this.dataSource.reset();\r\n            }\r\n        });\r\n    }\r\n\r\n    public maybeDeleteSelectedReviews() {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Reviews',\r\n            body:  'Are you sure you want to delete selected reviews?',\r\n            ok:    'Delete'\r\n        }).beforeClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            const ids = this.dataSource.getSelectedItems();\r\n            this.reviews.delete(ids).subscribe(() => {\r\n                this.dataSource.reset();\r\n            });\r\n        });\r\n    }\r\n}\r\n","<ng-container *ngIf=\"activePanel$ | async as activePanel\">\r\n    <primary-facts-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'primaryFacts'\"></primary-facts-panel>\r\n    <seasons-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'seasons'\"></seasons-panel>\r\n    <images-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'images'\"></images-panel>\r\n    <video-index class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'videos'\" [title]=\"title\"></video-index>\r\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"cast\" *ngIf=\"activePanel === 'cast'\"></credits-panel>\r\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"crew\" *ngIf=\"activePanel === 'crew'\"></credits-panel>\r\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"keyword\" *ngIf=\"activePanel === 'keywords'\"></tags-panel>\r\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"genre\" *ngIf=\"activePanel === 'genres'\"></tags-panel>\r\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"production_country\" displayType=\"country\" *ngIf=\"activePanel === 'countries'\"></tags-panel>\r\n    <reviews-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'reviews'\"></reviews-panel>\r\n\r\n    <aside class=\"sidebar material-panel\">\r\n        <div class=\"header\" trans>Edit</div>\r\n        <div class=\"list\">\r\n            <button class=\"list-item no-style\" (click)=\"openPanel('primaryFacts')\" [class.active]=\"activePanel === 'primaryFacts'\" trans>Primary Facts</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('seasons')\" [class.active]=\"activePanel === 'seasons'\" trans>Seasons</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('images')\" [class.active]=\"activePanel === 'images'\" trans>Images</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('videos')\" [class.active]=\"activePanel === 'videos'\" trans>Videos</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('cast')\" [class.active]=\"activePanel === 'cast'\" trans>Cast</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('crew')\" [class.active]=\"activePanel === 'crew'\" trans>Crew</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('genres')\" [class.active]=\"activePanel === 'genres'\" trans>Genres</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('keywords')\" [class.active]=\"activePanel === 'keywords'\" trans>Keywords</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('countries')\" [class.active]=\"activePanel === 'countries'\" trans>Countries</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('reviews')\" [class.active]=\"activePanel === 'reviews'\" trans>Reviews</button>\r\n        </div>\r\n        <p *ngIf=\"!titleCreated()\" class=\"message\" trans>Save from \"Primary Facts\" panel in order to enable other menu items.</p>\r\n    </aside>\r\n\r\n    <loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\r\n</ng-container>","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {HydrateTitle, ResetState} from './state/crupdate-title-actions';\r\nimport {CrupdateTitleState} from './state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Title} from '../../../../models/title';\r\n\r\n@Component({\r\n    selector: 'crupdate-title',\r\n    templateUrl: './crupdate-title.component.html',\r\n    styleUrls: ['./crupdate-title.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CrupdateTitleComponent implements OnInit, OnDestroy {\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public title: Title;\r\n    public activePanel$ = new BehaviorSubject<string>('primaryFacts');\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(data => {\r\n            this.store.dispatch(new HydrateTitle(data.api?.title));\r\n            this.title = data.api?.title;\r\n        });\r\n\r\n        this.route.queryParams.subscribe(params => {\r\n            this.activePanel$.next(params.active || 'primaryFacts');\r\n        });\r\n\r\n        if (this.route.snapshot.params.seasonNumber) {\r\n            this.activePanel$.next('seasons');\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.store.dispatch(new ResetState());\r\n    }\r\n\r\n    public openPanel(name: string) {\r\n        this.router.navigate([], {queryParams: {active: name}});\r\n    }\r\n\r\n    public titleCreated(): boolean {\r\n        return !!this.store.selectSnapshot(CrupdateTitleState.title).id;\r\n    }\r\n}\r\n","import {RouterModule, Routes} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\r\nimport {CrupdateTitleResolverService} from './crupdate-title/crupdate-title-resolver.service';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CrupdateTitleComponent,\r\n        resolve: {api: CrupdateTitleResolverService},\r\n        data: {permissions: ['titles.update']}\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class CrupdateTitleRoutingModule {\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {\r\n    ActivatedRouteSnapshot,\r\n    Resolve,\r\n    Router,\r\n    RouterStateSnapshot\r\n} from '@angular/router';\r\nimport {catchError, mergeMap} from 'rxjs/operators';\r\nimport {EMPTY, Observable, of} from 'rxjs';\r\nimport {Store} from '@ngxs/store';\r\nimport {TitlesService} from '../../titles.service';\r\nimport {CurrentUser} from '../../../../../common/auth/current-user';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CrupdateTitleResolverService implements Resolve<Observable<any>> {\r\n    constructor(\r\n        private router: Router,\r\n        private store: Store,\r\n        private titles: TitlesService,\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> {\r\n        const query = {fullCredits: true, keywords: true, countries: true, seasons: true, skipUpdating: true, allVideos: true},\r\n            titleId = +route.params.titleId;\r\n\r\n        if ( ! titleId) {\r\n            return of(null);\r\n        }\r\n\r\n        return this.titles.get(+route.params.titleId, query).pipe(\r\n            catchError(() => {\r\n                this.router.navigate(this.fallbackUri(state));\r\n                return EMPTY;\r\n            }),\r\n            mergeMap(response => {\r\n                if (response) {\r\n                    return of(response);\r\n                } else {\r\n                    this.router.navigate(this.fallbackUri(state));\r\n                    return EMPTY;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    private fallbackUri(state: RouterStateSnapshot) {\r\n        return state.url.includes('admin') ? ['/admin/titles'] : [state.url.replace('/edit', '')];\r\n    }\r\n}\r\n\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\nimport {PrimaryFactsPanelComponent} from './crupdate-title/panels/primary-facts-panel/primary-facts-panel.component';\nimport {ImagesPanelComponent} from './crupdate-title/panels/images-panel/images-panel.component';\nimport {CreditsPanelComponent} from './crupdate-title/panels/credits-panel/credits-panel.component';\nimport {CrupdateCreditModalComponent} from './crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component';\nimport {TagsPanelComponent} from './crupdate-title/panels/tags-panel/tags-panel.component';\nimport {SeasonsPanelComponent} from './crupdate-title/panels/seasons-panel/seasons-panel.component';\nimport {CrupdateEpisodeModalComponent} from './crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\nimport {ReviewsPanelComponent} from './crupdate-title/panels/reviews-panel/reviews-panel.component';\nimport {VideoIndexComponent} from '../../../admin/video-index/video-index.component';\nimport {CrupdateTitleRoutingModule} from './crupdate-title-routing.module';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatSortModule} from '@angular/material/sort';\nimport {TranslationsModule} from '../../../../common/core/translations/translations.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {DataTableModule} from '../../../../common/shared/data-table/data-table.module';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {NoResultsMessageModule} from '../../../../common/core/ui/no-results-message/no-results-message.module';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {EpisodesPanelComponent} from './crupdate-title/panels/episodes-panel/episodes-panel.component';\nimport {FormatPipesModule} from '../../../../common/core/ui/format-pipes/format-pipes.module';\nimport {LoadingIndicatorModule} from '../../../../common/core/ui/loading-indicator/loading-indicator.module';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {SearchInputModule} from '../../search/seach-input/search-input.module';\n\n\n@NgModule({\n    declarations: [\n        CrupdateTitleComponent,\n        PrimaryFactsPanelComponent,\n        ImagesPanelComponent,\n        CreditsPanelComponent,\n        CrupdateCreditModalComponent,\n        TagsPanelComponent,\n        SeasonsPanelComponent,\n        EpisodesPanelComponent,\n        CrupdateEpisodeModalComponent,\n        ReviewsPanelComponent,\n        VideoIndexComponent,\n    ],\n    imports: [\n        CommonModule,\n        CrupdateTitleRoutingModule,\n        TranslationsModule,\n        DataTableModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NoResultsMessageModule,\n        MediaImageModule,\n        FormatPipesModule,\n        LoadingIndicatorModule,\n        SearchInputModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatTableModule,\n        MatSortModule,\n        MatTooltipModule,\n        MatDialogModule,\n        MatTabsModule,\n        TextFieldModule,\n        MatExpansionModule,\n        DragDropModule,\n        MatAutocompleteModule,\n    ]\n})\nexport class CrupdateTitleModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BetweenInputComponent} from './between-input/between-input.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\n\n@NgModule({\n    declarations: [BetweenInputComponent],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n    ],\n    exports: [BetweenInputComponent]\n})\nexport class BetweenDateInputModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectUserInputComponent} from './select-user-input/select-user-input.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n@NgModule({\n    declarations: [SelectUserInputComponent],\n    imports: [\n        CommonModule,\n        MatButtonModule,\n        MatMenuModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        LoadingIndicatorModule,\n    ],\n    exports: [\n        SelectUserInputComponent\n    ],\n})\nexport class SelectUserInputModule {\n}\n","import { MatPaginatorIntl } from '@angular/material/paginator';\r\nimport {Translations} from '@common/core/translations/translations.service';\r\nimport {Injectable} from '@angular/core';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class DataTableIntlService extends MatPaginatorIntl {\r\n    itemsPerPageLabel = this.i18n.t('Items per page');\r\n    nextPageLabel     = this.i18n.t('Next page');\r\n    previousPageLabel = this.i18n.t('Previous page');\r\n\r\n    constructor(protected i18n: Translations) {\r\n        super();\r\n    }\r\n\r\n    getRangeLabel = (page: number, pageSize: number, length: number) => {\r\n        const of = this.i18n.t('of');\r\n        if (length == 0 || pageSize == 0) { return `0 ${of} ${length}`; }\r\n\r\n        length = Math.max(length, 0);\r\n\r\n        const startIndex = page * pageSize;\r\n\r\n        // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n        const endIndex = startIndex < length ?\r\n            Math.min(startIndex + pageSize, length) :\r\n            startIndex + pageSize;\r\n\r\n        return `${startIndex + 1} - ${endIndex} ${of} ${length}`;\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatPaginatorIntl, MatPaginatorModule} from '@angular/material/paginator';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {DataTableComponent} from '@common/shared/data-table/data-table.component';\nimport {FilterPanelComponent} from './filter-panel/filter-panel.component';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {BetweenDateInputModule} from '@common/core/ui/between-date-input/between-date-input.module';\nimport {SelectUserInputModule} from '@common/core/ui/select-user-input/select-user-input.module';\nimport {DataTableIntlService} from '@common/shared/data-table/data-table-intl.service';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {DataTableInputsModule} from '../../../app/admin/data-table-inputs/data-table-inputs.module';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatIconModule} from '@angular/material/icon';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {NoResultsMessageModule} from '@common/core/ui/no-results-message/no-results-message.module';\n\n@NgModule({\n    declarations: [\n        DataTableComponent,\n        FilterPanelComponent,\n    ],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        SelectUserInputModule,\n        DataTableInputsModule,\n        TranslationsModule,\n        NoResultsMessageModule,\n\n        // material\n        MatCheckboxModule,\n        MatIconModule,\n        MatButtonModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatSortModule,\n        MatChipsModule,\n        BetweenDateInputModule,\n        MatProgressBarModule,\n        PortalModule,\n        DragDropModule,\n    ],\n    exports: [\n        DataTableComponent,\n        MatTableModule,\n        MatPaginatorModule,\n        MatSortModule,\n    ],\n    providers: [\n        { provide: MatPaginatorIntl, useClass: DataTableIntlService}\n    ]\n})\nexport class DataTableModule {\n}\n","import {Injectable} from '@angular/core';\r\nimport {AppHttpClient} from '../../core/http/app-http-client.service';\r\nimport {PaginatedBackendResponse} from '../../core/types/pagination/paginated-backend-response';\r\nimport {Tag} from '@common/core/types/models/Tag';\r\nimport {BackendResponse} from '@common/core/types/backend-response';\r\n\r\nexport const TAGS_BASE_URI = 'tags';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TagsService {\r\n    constructor(private http: AppHttpClient) {\r\n    }\r\n\r\n    public index(params?: object): PaginatedBackendResponse<Tag> {\r\n        return this.http.get(TAGS_BASE_URI, params);\r\n    }\r\n\r\n    public create(params: Partial<Tag>): BackendResponse<{tag: Tag}> {\r\n        return this.http.post(TAGS_BASE_URI, params);\r\n    }\r\n\r\n    public update(id: number, params: Partial<Tag>): BackendResponse<{tag: Tag}> {\r\n        return this.http.put(`${TAGS_BASE_URI}/${id}`, params);\r\n    }\r\n\r\n    public delete(tagIds: number[]): BackendResponse<void> {\r\n        return this.http.delete(`${TAGS_BASE_URI}/${tagIds}`);\r\n    }\r\n\r\n}\r\n","import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, isDevMode, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, ContentChildren, Input, ContentChild, Output, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, ErrorStateMatcher, MatOption, MatOptgroup, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, HOME, END, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/overlay';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/material/form-field';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_2_Template, 1, 0, undefined, 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\");\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger'\n            }]\n    }], null, null); })();\nclass MatSelect extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, defaults) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Whether filling out the select is required in the form. */\n        this._required = false;\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** Whether the component is in multiple selection mode. */\n        this._multiple = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** The IDs of child options to be passed to the aria-owns attribute. */\n        this._optionIds = '';\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /** Whether the component is disabling centering of the active option over the trigger. */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        /** Aria label of the select. If not specified, the placeholder will be used as label. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        if (defaults) {\n            if (defaults.disableOptionCentering != null) {\n                this.disableOptionCentering = defaults.disableOptionCentering;\n            }\n            if (defaults.typeaheadDebounceInterval != null) {\n                this.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;\n            }\n        }\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this._panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        });\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.setActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n        this._setOptionIds();\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Records option IDs to pass to the aria-owns property. */\n    _setOptionIds() {\n        this._optionIds = this.options.map(option => option.id).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollActiveOptionIntoView() {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the index of the provided option in the option list. */\n    _getOptionIndex(option) {\n        return this.options.reduce((result, current, index) => {\n            if (result !== undefined) {\n                return result;\n            }\n            return option === current ? index : undefined;\n        }, undefined);\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset = this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0]);\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /** Returns the aria-label of the select component. */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /** Returns the aria-labelledby of the select component. */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"], hostVars: 19, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", disableOptionCentering: \"disableOptionCentering\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 9, consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 11, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc6.CdkOverlayOrigin, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc6.CdkConnectedOverlay, ɵngcc7.NgSwitchDefault, ɵngcc7.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup, { descendants: true },] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MatSelectTrigger,] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin\\n     class=\\\"mat-select-trigger\\\"\\n     aria-hidden=\\\"true\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\">\\n    <span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\\\u00A0'}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span *ngSwitchDefault>{{triggerValue || '\\\\u00A0'}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc8.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup, { descendants: true }]\n        }], panelClass: [{\n            type: Input\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MatSelectTrigger]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); }, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map","import { CommonModule } from '@angular/common';\nimport { ɵɵdefineInjectable, Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, Input, Output, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { mixinDisabled, mixinInitialized } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/material/tooltip';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/material/select';\nimport * as ɵngcc6 from '@angular/material/core';\n\nfunction MatPaginator_div_2_mat_form_field_3_mat_option_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 19);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const pageSizeOption_r6 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", pageSizeOption_r6);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", pageSizeOption_r6, \" \");\n} }\nfunction MatPaginator_div_2_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-form-field\", 16);\n    ɵngcc0.ɵɵelementStart(1, \"mat-select\", 17);\n    ɵngcc0.ɵɵlistener(\"selectionChange\", function MatPaginator_div_2_mat_form_field_3_Template_mat_select_selectionChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7._changePageSize($event.value); });\n    ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_mat_form_field_3_mat_option_2_Template, 2, 2, \"mat-option\", 18);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r3.pageSize)(\"disabled\", ctx_r3.disabled)(\"aria-label\", ctx_r3._intl.itemsPerPageLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3._displayedPageSizeOptions);\n} }\nfunction MatPaginator_div_2_div_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 20);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.pageSize);\n} }\nfunction MatPaginator_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, MatPaginator_div_2_mat_form_field_3_Template, 3, 5, \"mat-form-field\", 14);\n    ɵngcc0.ɵɵtemplate(4, MatPaginator_div_2_div_4_Template, 2, 1, \"div\", 15);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0._intl.itemsPerPageLabel, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length > 1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length <= 1);\n} }\nfunction MatPaginator_button_6_Template(rf, ctx) { if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 21);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.firstPage(); });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 22);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r1._intl.firstPageLabel)(\"matTooltipDisabled\", ctx_r1._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r1._previousButtonsDisabled());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1._intl.firstPageLabel);\n} }\nfunction MatPaginator_button_13_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 23);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_13_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.lastPage(); });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 24);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r2._intl.lastPageLabel)(\"matTooltipDisabled\", ctx_r2._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r2._nextButtonsDisabled());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2._intl.lastPageLabel);\n} }\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ?\n                Math.min(startIndex + pageSize, length) :\n                startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n}\nMatPaginatorIntl.ɵfac = function MatPaginatorIntl_Factory(t) { return new (t || MatPaginatorIntl)(); };\nMatPaginatorIntl.ɵprov = ɵɵdefineInjectable({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPaginatorIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {\n}\nconst _MatPaginatorBase = mixinDisabled(mixinInitialized(MatPaginatorBase));\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() { return this._pageIndex; }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() { return this._length; }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() { return this._pageSize; }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() { return this._pageSizeOptions; }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() { return this._hidePageSize; }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() { return this._showFirstLastButtons; }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex++;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex--;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize = this.pageSizeOptions.length != 0 ?\n                this.pageSizeOptions[0] :\n                DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length\n        });\n    }\n}\nMatPaginator.ɵfac = function MatPaginator_Factory(t) { return new (t || MatPaginator)(ɵngcc0.ɵɵdirectiveInject(MatPaginatorIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_PAGINATOR_DEFAULT_OPTIONS, 8)); };\nMatPaginator.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatPaginator, selectors: [[\"mat-paginator\"]], hostAttrs: [1, \"mat-paginator\"], inputs: { disabled: \"disabled\", pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\", color: \"color\" }, outputs: { page: \"page\" }, exportAs: [\"matPaginator\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 14, vars: 14, consts: [[1, \"mat-paginator-outer-container\"], [1, \"mat-paginator-container\"], [\"class\", \"mat-paginator-page-size\", 4, \"ngIf\"], [1, \"mat-paginator-range-actions\"], [1, \"mat-paginator-range-label\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-previous\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", 1, \"mat-paginator-icon\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-next\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [1, \"mat-paginator-page-size\"], [1, \"mat-paginator-page-size-label\"], [\"class\", \"mat-paginator-page-size-select\", 3, \"color\", 4, \"ngIf\"], [\"class\", \"mat-paginator-page-size-value\", 4, \"ngIf\"], [1, \"mat-paginator-page-size-select\", 3, \"color\"], [3, \"value\", \"disabled\", \"aria-label\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"mat-paginator-page-size-value\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"]], template: function MatPaginator_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_Template, 5, 3, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n        ɵngcc0.ɵɵtext(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, MatPaginator_button_6_Template, 3, 5, \"button\", 5);\n        ɵngcc0.ɵɵelementStart(7, \"button\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_7_listener() { return ctx.previousPage(); });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(8, \"svg\", 7);\n        ɵngcc0.ɵɵelement(9, \"path\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelementStart(10, \"button\", 9);\n        ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_10_listener() { return ctx.nextPage(); });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(11, \"svg\", 7);\n        ɵngcc0.ɵɵelement(12, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(13, MatPaginator_button_13_Template, 3, 5, \"button\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hidePageSize);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx._intl.getRangeLabel(ctx.pageIndex, ctx.pageSize, ctx.length), \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.previousPageLabel)(\"matTooltipDisabled\", ctx._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._previousButtonsDisabled());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.previousPageLabel);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.nextPageLabel)(\"matTooltipDisabled\", ctx._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._nextButtonsDisabled());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.nextPageLabel);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton, ɵngcc3.MatTooltip, ɵngcc4.MatFormField, ɵngcc5.MatSelect, ɵngcc1.NgForOf, ɵngcc6.MatOption], styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatPaginator.ctorParameters = () => [\n    { type: MatPaginatorIntl },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PAGINATOR_DEFAULT_OPTIONS,] }] }\n];\nMatPaginator.propDecorators = {\n    color: [{ type: Input }],\n    pageIndex: [{ type: Input }],\n    length: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    pageSizeOptions: [{ type: Input }],\n    hidePageSize: [{ type: Input }],\n    showFirstLastButtons: [{ type: Input }],\n    page: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPaginator, [{\n        type: Component,\n        args: [{\n                selector: 'mat-paginator',\n                exportAs: 'matPaginator',\n                template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-paginator'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\\n\"]\n            }]\n    }], function () { return [{ type: MatPaginatorIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n            }] }]; }, { page: [{\n            type: Output\n        }], pageIndex: [{\n            type: Input\n        }], length: [{\n            type: Input\n        }], pageSize: [{\n            type: Input\n        }], pageSizeOptions: [{\n            type: Input\n        }], hidePageSize: [{\n            type: Input\n        }], showFirstLastButtons: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatPaginatorModule });\nMatPaginatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatPaginatorModule_Factory(t) { return new (t || MatPaginatorModule)(); }, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [[\n            CommonModule,\n            MatButtonModule,\n            MatSelectModule,\n            MatTooltipModule,\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatPaginatorModule, { declarations: function () { return [MatPaginator]; }, imports: function () { return [CommonModule,\n        MatButtonModule,\n        MatSelectModule,\n        MatTooltipModule]; }, exports: function () { return [MatPaginator]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPaginatorModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatSelectModule,\n                    MatTooltipModule,\n                ],\n                exports: [MatPaginator],\n                declarations: [MatPaginator],\n                providers: [MAT_PAGINATOR_INTL_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent };\n\n//# sourceMappingURL=paginator.js.map","import {ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {catchError, debounceTime, distinctUntilChanged, finalize, switchMap} from 'rxjs/operators';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {User} from '@common/core/types/models/User';\nimport {Users} from '@common/auth/users.service';\n\n@Component({\n    selector: 'select-user-input',\n    templateUrl: './select-user-input.component.html',\n    styleUrls: ['./select-user-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: SelectUserInputComponent,\n        multi: true,\n    }]\n})\nexport class SelectUserInputComponent implements ControlValueAccessor, OnInit {\n    @ViewChild('searchInput', {static: true}) searchInput: ElementRef<HTMLInputElement>;\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public users$ = new BehaviorSubject<User[]>([]);\n    public selectedUser$ = new BehaviorSubject<User>(null);\n    private propagateChange: Function;\n    public searchedOnce = false;\n\n    constructor(private users: Users) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: User) {\n        if (typeof value === 'object') {\n            this.selectedUser$.next(value);\n        }\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchUsers(query)),\n            catchError(() => of([])),\n        ).subscribe(users => {\n            this.searchedOnce = true;\n            this.users$.next(users);\n        });\n    }\n\n    private searchUsers(query: string): Observable<User[]> {\n        this.loading$.next(true);\n        return this.users.getAll({query, per_page: 7})\n            .pipe(finalize(() =>  this.loading$.next(false)));\n    }\n\n    public onMenuOpened() {\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n        setTimeout(() => {\n            this.searchInput.nativeElement.focus();\n        });\n    }\n\n    public selectUser(user: User) {\n        this.selectedUser$.next(user);\n        this.propagateChange(user);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<div class=\"input-container\">\r\n    <div class=\"fake-label\" trans>User</div>\r\n    <div class=\"fake-input\" tabindex=\"0\" [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\">\r\n        <span *ngIf=\"selectedUser$ | async as selectedUser; else anyUser\">\r\n            <img [src]=\"selectedUser.avatar\">{{selectedUser.display_name}}\r\n        </span>\r\n        <ng-template #anyUser>\r\n            <span trans>Any</span>\r\n        </ng-template>\r\n        <div class=\"arrow-container\">\r\n            <div class=\"arrow\"></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\">\r\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\r\n        <div class=\"search-input-wrapper\">\r\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" (blur)=\"searchInput.focus()\" #searchInput trans-placeholder>\r\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\r\n        </div>\r\n    </div>\r\n    <button mat-menu-item (click)=\"selectUser(null)\">\r\n        <img src=\"client/assets/images/anonymous-user.png\">\r\n        <div class=\"info any-user-info\">\r\n            <div class=\"name\" trans>Any User</div>\r\n        </div>\r\n    </button>\r\n    <button mat-menu-item *ngFor=\"let user of users$ | async\" (click)=\"selectUser(user)\">\r\n        <img [src]=\"user.avatar\">\r\n        <div class=\"user-info\">\r\n            <div class=\"name\">{{user.display_name}}</div>\r\n            <div class=\"email\">{{user.email}}</div>\r\n        </div>\r\n    </button>\r\n    <button mat-menu-item disabled *ngIf=\"searchedOnce && !(users$ | async).length\" trans>No users found.</button>\r\n</mat-menu>\r\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {ControlValueAccessor, FormBuilder, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {filter} from 'rxjs/operators';\n\n@Component({\n    selector: 'between-input',\n    templateUrl: './between-input.component.html',\n    styleUrls: ['./between-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: BetweenInputComponent,\n        multi: true,\n    }]\n})\nexport class BetweenInputComponent implements ControlValueAccessor {\n    @Input() setDefaultDate = false;\n    @Input() showLabels = false;\n    public datePattern = '([12]\\\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\\\d|3[01]))';\n    private initiated = false;\n    public defaultFrom: string;\n    public defaultTo: string;\n    private propagateChange: Function;\n    public form = this.fb.group({\n        from: [''],\n        to: [''],\n    });\n\n    constructor(public fb: FormBuilder) {\n        this.defaultFrom = this.getDefaultDate(7);\n        this.defaultTo = this.getDefaultDate();\n    }\n\n    public writeValue(value: string) {\n        let [from, to] = (value || '').split(':');\n\n        if ( ! this.initiated && this.setDefaultDate) {\n            from = from || this.defaultFrom;\n            to = to || this.defaultTo;\n        }\n\n        this.initiated = true;\n        this.form.patchValue({from, to});\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n        this.form.valueChanges\n            // only emit if user has set values to both to and from inputs\n            .pipe(filter(value => value.from && value.to))\n            .subscribe(value => {\n                const between = `${value.from}:${value.to}`;\n                this.propagateChange(between);\n            });\n    }\n\n    public registerOnTouched() {}\n\n    private getDefaultDate(minusDays: number = 0) {\n        const d = new Date();\n        d.setDate(d.getDate() - minusDays);\n        const month = this.addZero(d.getMonth()),\n            day = this.addZero(d.getDate());\n        return `${d.getFullYear()}-${month}-${day}`;\n    }\n\n    private addZero(number: number): string {\n        return number < 10 ? '0' + number : '' + number;\n    }\n}\n","<fieldset [formGroup]=\"form\">\n    <legend trans>\n        <ng-content></ng-content>\n    </legend>\n   <div class=\"inline-inputs-container\">\n       <div class=\"input-container\">\n           <label for=\"from\" [class.hidden]=\"!showLabels\" trans>From</label>\n           <input type=\"date\" id=\"from\" formControlName=\"from\" [placeholder]=\"defaultFrom\" [pattern]=\"datePattern\" required>\n       </div>\n       <div class=\"input-container\">\n           <label for=\"to\" [class.hidden]=\"!showLabels\" trans>To</label>\n           <input type=\"date\" id=\"to\" formControlName=\"to\" [placeholder]=\"defaultTo\" [pattern]=\"datePattern\" required>\n       </div>\n   </div>\n</fieldset>","<ng-container [formGroup]=\"formGroup\">\n    <select-title-input [formControlName]=\"filter.column\" *ngIf=\"filter.name === 'title'\"></select-title-input>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {DataTableFilter} from '@common/shared/data-table/filter-panel/data-table-filters';\n\n@Component({\n    selector: 'app-data-table-inputs',\n    templateUrl: './app-data-table-inputs.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n// There's no way to bind dynamically loaded custom form control\n// to form in angular so we need to create a wrapper component\nexport class AppDataTableInputsComponent {\n    @Input() formGroup: FormGroup;\n    @Input() filter: DataTableFilter;\n}\n","<header>\n    <mat-icon svgIcon=\"filter-list\"></mat-icon>\n    <span trans>Filters</span>\n</header>\n\n<form [formGroup]=\"data.source.filterForm\" class=\"many-inputs\">\n    <ng-container *ngFor=\"let filter of data.source.config.filters\">\n        <div class=\"input-container\" *ngIf=\"conditionPasses(filter.condition)\">\n            <div [ngSwitch]=\"filter.type\">\n                <ng-container *ngSwitchCase=\"'date'\">\n                    <between-input [formControlName]=\"filter.column\" [setDefaultDate]=\"false\" [showLabels]=\"false\">{{filter.name}}</between-input>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'custom'\">\n                    <select-user-input *ngIf=\"filter.name === 'user'\" [formControlName]=\"filter.column\"></select-user-input>\n                    <app-data-table-inputs *ngIf=\"filter.name !== 'user'\" [formGroup]=\"data.source.filterForm\" [filter]=\"filter\"></app-data-table-inputs>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'user-select'\">\n                    <select-user-input [formControlName]=\"filter.column\"></select-user-input>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'select'\">\n                    <label [for]=\"filter.name\" trans>{{viewName(filter.name)}}</label>\n                    <select [id]=\"filter.name\" [formControlName]=\"filter.column\">\n                        <option [ngValue]=\"getValue(option)\" *ngFor=\"let option of filter.options\" trans>{{optionName(option)}}</option>\n                    </select>\n                </ng-container>\n            </div>\n        </div>\n    </ng-container>\n</form>\n\n<footer>\n    <button (click)=\"close()\" type=\"button\" mat-button color=\"accent\" trans>Close</button>\n</footer>\n","import {ChangeDetectionStrategy, Component, Inject, OnDestroy, OnInit, Optional} from '@angular/core';\nimport {OVERLAY_PANEL_DATA} from '@common/core/ui/overlay-panel/overlay-panel-data';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {PaginatedDataTableSource} from '@common/shared/data-table/data/paginated-data-table-source';\nimport {\n    DataTableFilterCondition,\n    DataTableFilterOption\n} from '@common/shared/data-table/filter-panel/data-table-filters';\nimport {matDialogAnimations} from '@angular/material/dialog';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Subscription} from 'rxjs';\nimport {ComponentPortal} from '@angular/cdk/portal';\n\n@Component({\n    selector: 'filter-panel',\n    templateUrl: './filter-panel.component.html',\n    styleUrls: ['./filter-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[@dialogContainer]': `'enter'`\n    },\n    animations: [\n        matDialogAnimations.dialogContainer,\n    ]\n})\nexport class FilterPanelComponent implements OnInit, OnDestroy {\n    public portals: {[key: string]: ComponentPortal<any>} = {};\n    private subscription: Subscription;\n    constructor(\n        @Inject(OVERLAY_PANEL_DATA) @Optional() public data: {source: PaginatedDataTableSource<any>},\n        private overlayPanelRef: OverlayPanelRef,\n        public settings: Settings,\n    ) {}\n\n    ngOnInit() {\n        this.subscription = this.data.source.filterForm.valueChanges\n            .subscribe(() => this.close());\n        this.data.source.config.filters.forEach(filter => {\n            if (filter.component) {\n                this.portals[filter.name] = new ComponentPortal(filter.component);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription && this.subscription.unsubscribe();\n    }\n\n    public viewName(name: string): string {\n        return name.replace(/_/g, ' ');\n    }\n\n    public optionName(option: DataTableFilterOption): string {\n        return option.displayName || this.viewName(option.name);\n    }\n\n    public close() {\n        this.overlayPanelRef.close();\n    }\n\n    public getValue(option: DataTableFilterOption) {\n        // if no value is provided, use name as value instead\n        let value = option.value === undefined ? option.name : option.value;\n        // should disable filter completely if value is \"all\"\n        if (value === 'all' || value === 'any') value = null;\n        return value;\n    }\n\n    public conditionPasses(condition: DataTableFilterCondition): boolean {\n        if ( ! condition) {\n            return true;\n        }\n        if (typeof condition === 'function') {\n            return condition(this.data.source);\n        } else {\n            return this.settings.get(condition);\n        }\n    }\n}\n","import { ConnectedPosition } from '@angular/cdk/overlay';\r\n\r\nexport const LEFT_POSITION: ConnectedPosition[] = [\r\n    {originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: 5},\r\n    {originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: 5},\r\n];\r\n","<mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"dataSource.loading$ | async\"></mat-progress-bar>\r\n<div class=\"data-table-panel\">\r\n    <div class=\"data-table-header\" *ngIf=\"!hideHeader\">\r\n        <div class=\"header-inner default\" [class.hidden]=\"dataSource.anyRowsSelected() && selectedActions.children.length\">\r\n            <div class=\"left\"><ng-content select=\"[headerActions]\"></ng-content></div>\r\n\r\n            <div class=\"right\">\r\n                <ng-container *ngIf=\"dataSource.config.filters?.length\">\r\n                    <mat-chip-list aria-label=\"Active Filters\" class=\"filter-chip-list\">\r\n                        <mat-chip *ngFor=\"let filter of dataSource.activeFilters$ | async\" [removable]=\"true\" [selectable]=\"false\" (removed)=\"dataSource.removeFilter(filter.column)\">\r\n                            {{filter.name}}\r\n                            <mat-icon matChipRemove svgIcon=\"cancel\"></mat-icon>\r\n                        </mat-chip>\r\n                    </mat-chip-list>\r\n                    <button (click)=\"openFiltersPanel()\" class=\"filter-button\" [class.active]=\"filterPanelRef\" #filterButton mat-icon-button>\r\n                        <mat-icon svgIcon=\"filter-list\"></mat-icon>\r\n                    </button>\r\n                </ng-container>\r\n                <ng-content select=\"[headerFilters]\"></ng-content>\r\n                <div class=\"input-container\">\r\n                    <input type=\"text\" class=\"search-input\" placeholder=\"Search {{ itemsName }}\" trans-placeholder [formControl]=\"dataSource.searchControl\">\r\n                    <mat-icon svgIcon=\"search\"></mat-icon>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"header-inner selected\" [class.hidden]=\"!dataSource.anyRowsSelected() || !selectedActions.children.length\">\r\n            <div class=\"left\">{{dataSource.selectedRows.selected.length}} <span class=\"text\" trans>{{itemsName}} Selected</span></div>\r\n            <div class=\"right\" #selectedActions><ng-content select=\"[headerSelectedActions]\"></ng-content></div>\r\n        </div>\r\n\r\n        <ng-content select=\"[headerContent]\"></ng-content>\r\n    </div>\r\n\r\n    <mat-table [dataSource]=\"dataSource\" [class.empty]=\"dataSource.noResults$ | async\" matSort>\r\n        <ng-container matColumnDef=\"select\">\r\n            <mat-header-cell *matHeaderCellDef>\r\n                <mat-checkbox (change)=\"$event ? dataSource.toggleAllRows() : null\"\r\n                              [checked]=\"dataSource.allRowsSelected()\"\r\n                              [indeterminate]=\"dataSource.anyRowsSelected() && ! dataSource.allRowsSelected()\">\r\n                </mat-checkbox>\r\n            </mat-header-cell>\r\n            <mat-cell *matCellDef=\"let row\">\r\n                <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                              (change)=\"$event ? dataSource.selectedRows.toggle(row) : null\"\r\n                              [checked]=\"dataSource.selectedRows.isSelected(row)\">\r\n                </mat-checkbox>\r\n            </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-content></ng-content>\r\n\r\n        <mat-header-row *matHeaderRowDef=\"columns\"></mat-header-row>\r\n        <mat-row *matRowDef=\"let myRowData; columns: columns\"></mat-row>\r\n    </mat-table>\r\n\r\n    <ng-container *ngIf=\"dataSource.noResults$ | async\">\r\n        <div class=\"no-results-message-container\" #noResults><ng-content select=\"no-results-message\"></ng-content></div>\r\n        <no-results-message *ngIf=\"!noResults.children.length\">\r\n            <span primary-text trans>Nothing To Display.</span>\r\n            <span secondary-text trans>Seems like no {{itemsName}} have been created yet.</span>\r\n        </no-results-message>\r\n    </ng-container>\r\n\r\n    <mat-paginator [class.hidden]=\"!dataSource.config.dataPaginator\" [pageSize]=\"15\" [pageSizeOptions]=\"[10, 15, 20, 50, 100]\"></mat-paginator>\r\n</div>\r\n","import {\r\n    AfterContentInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ContentChild,\r\n    ContentChildren,\r\n    ElementRef,\r\n    Input,\r\n    OnInit,\r\n    QueryList,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatColumnDef, MatRowDef, MatTable} from '@angular/material/table';\r\nimport {PaginatedDataTableSource} from './data/paginated-data-table-source';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {FilterPanelComponent} from '@common/shared/data-table/filter-panel/filter-panel.component';\r\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\r\nimport {LEFT_POSITION} from '@common/core/ui/overlay-panel/positions/left-position';\r\n\r\n@Component({\r\n    selector: 'data-table',\r\n    templateUrl: './data-table.component.html',\r\n    styleUrls: ['./data-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n\r\n    // can't add encapsulation as won't be able\r\n    // to style common table columns otherwise\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class DataTableComponent<T> implements OnInit, AfterContentInit {\r\n    @ViewChild(MatTable, {static: true}) table: MatTable<T>;\r\n    @ContentChildren(MatColumnDef) columnDefs: QueryList<MatColumnDef>;\r\n    @ViewChild(MatPaginator, {static: true}) matPaginator: MatPaginator;\r\n    @ViewChild('filterButton', { read: ElementRef }) filterButton: ElementRef<HTMLButtonElement>;\r\n    @ContentChild(MatRowDef) rowDef: MatRowDef<T>;\r\n\r\n    @Input() dataSource: PaginatedDataTableSource<T>;\r\n    @Input() itemsName: string;\r\n    @Input() showCheckbox = true;\r\n    @Input() hideHeader = false;\r\n\r\n    public columns: string[] = ['select'];\r\n    public filterPanelRef: OverlayPanelRef<FilterPanelComponent>;\r\n\r\n    constructor(private overlayPanel: OverlayPanel) {}\r\n\r\n    ngOnInit() {\r\n        this.dataSource.config.matPaginator = this.matPaginator;\r\n        if (this.dataSource.config.matSort) {\r\n            this.dataSource.config.matSort.start = 'desc';\r\n        }\r\n        if ( ! this.dataSource.config.delayInit) {\r\n            this.dataSource.init();\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        // row def specified by parent component, *matRowDef from\r\n        // data-table component will not be available here yet\r\n        // specified rowDef should use \"when\" predicate to avoid errors.\r\n        if (this.rowDef) {\r\n            this.table.addRowDef(this.rowDef);\r\n        }\r\n        // Register default column defs to the table\r\n        this.columnDefs.forEach(columnDef => {\r\n            this.columns.push(columnDef.name);\r\n            this.table.addColumnDef(columnDef);\r\n        });\r\n    }\r\n\r\n    public openFiltersPanel() {\r\n        if (this.filterPanelRef) {\r\n            this.filterPanelRef.close();\r\n        } else {\r\n            const position = LEFT_POSITION.slice();\r\n            position[0].offsetY = 40;\r\n            position[1].offsetY = 40;\r\n            this.filterPanelRef = this.overlayPanel.open(FilterPanelComponent, {\r\n                origin: this.filterButton,\r\n                position: position,\r\n                mobilePosition: 'center',\r\n                data: {source: this.dataSource}\r\n            });\r\n            this.filterPanelRef.afterClosed().subscribe(() => {\r\n                this.filterPanelRef = null;\r\n            });\r\n        }\r\n    }\r\n}\r\n","import {DataTableFilter} from '@common/shared/data-table/filter-panel/data-table-filters';\r\nimport {SelectTitleInputComponent} from './select-title-input/select-title-input.component';\r\nimport {SelectUserInputComponent} from '@common/core/ui/select-user-input/select-user-input/select-user-input.component';\r\n\r\nexport const VIDEO_INDEX_FILTERS: DataTableFilter[] = [\r\n    {\r\n        name: 'Source',\r\n        column: 'source',\r\n        type: 'select',\r\n        options: [\r\n            {name: 'all'},\r\n            {name: 'local'},\r\n            {name: 'external'}\r\n        ]\r\n    },\r\n    {\r\n        name: 'Category',\r\n        column: 'category',\r\n        type: 'select',\r\n        options: [\r\n            {name: 'all'},\r\n            {name: 'trailer'},\r\n            {name: 'clip'},\r\n            {name: 'featurette'},\r\n            {name: 'teaser'},\r\n            {name: 'full', displayName: 'Full Movie or episode'}\r\n        ]\r\n    },\r\n    {\r\n        name: 'approved',\r\n        column: 'approved',\r\n        type: 'select',\r\n        options: [\r\n            {name: 'all'},\r\n            {name: 'approved only', value: true},\r\n            {name: 'not approved only', value: false}\r\n        ]\r\n    },\r\n    {\r\n        name: 'quality',\r\n        column: 'quality',\r\n        type: 'select',\r\n        options: [\r\n            {name: 'all'},\r\n            {name: 'SD', value: 'sd'},\r\n            {name: 'HD', value: 'hd'},\r\n            {name: '4k', value: '4k'},\r\n            {name: 'HDR', value: 'hdr'},\r\n        ]\r\n    },\r\n    {\r\n        name: 'type',\r\n        column: 'type',\r\n        type: 'select',\r\n        options: [\r\n            {name: 'all'},\r\n            {name: 'Embed'},\r\n            {name: 'Direct Video', value: 'video'},\r\n            {name: 'frame'},\r\n            {name: 'Remote Link', value: 'external'},\r\n        ]\r\n    },\r\n    {\r\n        name: 'user',\r\n        column: 'user_id',\r\n        component: SelectUserInputComponent,\r\n        type: 'custom',\r\n    },\r\n    {\r\n        name: 'title',\r\n        column: 'titleId',\r\n        component: SelectTitleInputComponent,\r\n        type: 'custom',\r\n    },\r\n    {\r\n        name: 'season',\r\n        column: 'season',\r\n        type: 'hidden',\r\n    },\r\n    {\r\n        name: 'episode',\r\n        column: 'episode',\r\n        type: 'hidden',\r\n    },\r\n];\r\n","<data-table [dataSource]=\"dataSource\" itemsName=\"videos\" matSort>\r\n    <ng-container headerActions *ngIf=\"currentUser.hasPermission('videos.create')\">\r\n        <button mat-raised-button (click)=\"openCrupdateVideoModal()\" color=\"accent\" trans>Add</button>\r\n    </ng-container>\r\n\r\n    <button mat-icon-button [matTooltip]=\"'Delete selected' | trans\" (click)=\"maybeDeleteSelectedPeople()\" headerSelectedActions *ngIf=\"currentUser.hasPermission('videos.delete')\">\r\n        <mat-icon svgIcon=\"delete\"></mat-icon>\r\n    </button>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header trans>Video</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\">\r\n            <img [src]=\"video.thumbnail || video.title?.backdrop\" alt=\"\" [title]=\"video.name\">\r\n            <a class=\"video-name\" [href]=\"video.url\" target=\"_blank\">{{video.name}}</a>\r\n        </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"title\" *ngIf=\"!title\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\"title_id\" trans>Title</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\">\r\n            <a [routerLink]=\"['/admin/titles', video.title.id, 'edit']\" [queryParams]=\"{active: 'videos'}\" *ngIf=\"video.title\">{{video.title.name}}</a>\r\n        </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"type\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header trans class=\"small-column\">Type</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\" class=\"small-column\"> {{video.type}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"category\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header trans class=\"small-column\">Category</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\" class=\"small-column\"> {{video.category}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"approved\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\"small-column\" trans>Approved</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\" class=\"small-column\">\r\n            <button mat-icon-button (click)=\"toggleApprovedState(video)\" class=\"approve-button\" [class.disapproved]=\"!video.approved\"  [class.approved]=\"video.approved\" [disabled]=\"modifying$ | async\">\r\n                <mat-icon svgIcon=\"check\" class=\"success-icon\"></mat-icon>\r\n                <mat-icon svgIcon=\"close\" class=\"warn-icon\"></mat-icon>\r\n            </button>\r\n        </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"plays\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\"plays_count\" trans class=\"small-column\">Plays</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\" class=\"small-column\"> {{video.plays_count}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"quality\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header trans class=\"small-column\">Quality</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\" class=\"small-column\">\r\n            <div [ngSwitch]=\"video.quality\">\r\n                <mat-icon class=\"icon-quality\" svgIcon=\"hd\" *ngSwitchCase=\"'hd'\"></mat-icon>\r\n                <mat-icon class=\"icon-quality\" svgIcon=\"4k\" *ngSwitchCase=\"'4k'\"></mat-icon>\r\n                <div *ngSwitchCase=\"'regular'\">-</div>\r\n                <div class=\"text-quality\" *ngSwitchDefault>{{video.quality}}</div>\r\n            </div>\r\n        </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"score\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\"score\" trans class=\"small-column\">Score</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\" class=\"small-column\">{{video.score ? video.score + '%' : '-'}}</mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"reports\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\"reports_count\" trans class=\"small-column\">Reports</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\" class=\"small-column\">{{video.reports_count ? video.reports_count : '-'}}</mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"season\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\"season\" trans class=\"small-column\">Season</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\" class=\"small-column\">{{video.season ? video.season : '-'}}</mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"episode\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header=\"episode\" trans class=\"small-column\">Episode</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\" class=\"small-column\">{{video.episode ? video.episode : '-'}}</mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"edit\">\r\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n        <mat-cell *matCellDef=\"let video\">\r\n            <button mat-icon-button (click)=\"openCrupdateVideoModal(video)\" *ngIf=\"currentUser.hasPermission('videos.update')\" [matTooltip]=\"'Edit video' | trans\">\r\n                <mat-icon svgIcon=\"edit\"></mat-icon>\r\n            </button>\r\n        </mat-cell>\r\n    </ng-container>\r\n</data-table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport {TitleUrlsService} from '../../site/titles/title-urls.service';\r\nimport {VideoService} from '../../site/videos/video.service';\r\nimport {Video} from '../../models/video';\r\nimport {CrupdateVideoModalComponent} from '../../site/videos/crupdate-video-modal/crupdate-video-modal.component';\r\nimport {PaginatedDataTableSource} from '@common/shared/data-table/data/paginated-data-table-source';\r\nimport {Paginator} from '@common/shared/paginator.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {CurrentUser} from '@common/auth/current-user';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {finalize} from 'rxjs/operators';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {HttpErrors} from '@common/core/http/errors/http-errors.enum';\r\nimport {VIDEO_INDEX_FILTERS} from './video-index-filters';\r\nimport {Title} from '../../models/title';\r\n\r\n@Component({\r\n    selector: 'video-index',\r\n    templateUrl: './video-index.component.html',\r\n    styleUrls: ['./video-index.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [Paginator],\r\n})\r\nexport class VideoIndexComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatSort, {static: true}) matSort: MatSort;\r\n    @Input() title: Title;\r\n    public dataSource: PaginatedDataTableSource<Video>;\r\n    public modifying$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(\r\n        public paginator: Paginator<Video>,\r\n        private videos: VideoService,\r\n        private modal: Modal,\r\n        public currentUser: CurrentUser,\r\n        public settings: Settings,\r\n        public urls: TitleUrlsService,\r\n        private toast: Toast,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this.title) {\r\n            // will be paginating inside parent component, so should not update query\r\n            this.paginator.dontUpdateQueryParams = !!this.title;\r\n        }\r\n        this.dataSource = new PaginatedDataTableSource<Video>({\r\n            uri: 'videos',\r\n            dataPaginator: this.paginator,\r\n            matSort: this.matSort,\r\n            filters: VIDEO_INDEX_FILTERS,\r\n            staticParams: {titleId: this.title && this.title.id}\r\n        });\r\n        if (this.title) {\r\n            // disable \"title\" filter, if showing videos for specific\r\n            // title only but allow changing of season and episode\r\n            this.dataSource.filterForm.get('titleId').setValue(this.title);\r\n            this.dataSource.filterForm.get('titleId').disable();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.paginator.destroy();\r\n    }\r\n\r\n    public deleteSelectedPeople() {\r\n        const ids = this.dataSource.selectedRows.selected.map(title => title.id);\r\n        this.videos.delete(ids).subscribe(() => {\r\n            this.dataSource.reset();\r\n            this.dataSource.selectedRows.clear();\r\n        });\r\n    }\r\n\r\n    public maybeDeleteSelectedPeople() {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Videos',\r\n            body:  'Are you sure you want to delete selected videos',\r\n            ok:    'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.deleteSelectedPeople();\r\n        });\r\n    }\r\n\r\n    public openCrupdateVideoModal(video?: Video) {\r\n        this.modal.open(\r\n            CrupdateVideoModalComponent,\r\n            {video, title: video ? video.title : this.title, hideTitleSelect: !!this.title},\r\n        ).beforeClosed().subscribe(newVideo => {\r\n            if (newVideo) {\r\n                this.dataSource.reset();\r\n            }\r\n        });\r\n    }\r\n\r\n    public toggleApprovedState(video: Video) {\r\n        this.modifying$.next(true);\r\n        const request = video.approved ?\r\n            this.videos.disapprove(video.id) :\r\n            this.videos.approve(video.id);\r\n        video.approved = !video.approved;\r\n        request\r\n            .pipe(finalize(() => this.modifying$.next(false)))\r\n            .subscribe(() => {}, () => {\r\n                this.toast.open(HttpErrors.Default);\r\n                video.approved = !video.approved;\r\n            });\r\n    }\r\n}\r\n","import {BehaviorSubject, combineLatest, merge, Observable} from 'rxjs';\r\nimport {debounceTime, distinctUntilChanged, filter, map, take} from 'rxjs/operators';\r\nimport {FormControl, FormGroup} from '@angular/forms';\r\nimport {PageEvent} from '@angular/material/paginator';\r\nimport {Sort} from '@angular/material/sort';\r\nimport {DataSource, SelectionModel} from '@angular/cdk/collections';\r\nimport {DataTableSourceConfig} from '@common/shared/data-table/data/data-table-source-config';\r\nimport {arrayToObject} from '@common/core/utils/array-to-object';\r\nimport {DataTableFilter} from '@common/shared/data-table/filter-panel/data-table-filters';\r\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\r\nimport {PaginationParams} from '@common/core/types/pagination/pagination-params';\r\n\r\nexport class PaginatedDataTableSource<T> implements DataSource<T> {\r\n    public initiated = false;\r\n    private pagination$ = new BehaviorSubject<PaginationResponse<T>>(null);\r\n    private userParamsChange$ = new BehaviorSubject<object>({});\r\n    public selectedRows = new SelectionModel<T>(true, []);\r\n    public searchControl = new FormControl();\r\n    public filterForm = new FormGroup({});\r\n    public nextPageLoader$ = new BehaviorSubject<{page: number}>(null);\r\n    public virtualSort$ = new BehaviorSubject<Partial<Sort>>({});\r\n    public paginationParams: PaginationParams = {};\r\n    public activeFilters$: Observable<DataTableFilter[]> = this.filterForm.valueChanges.pipe(map((value: object) => {\r\n        return Object.entries(value)\r\n            // remove non active filters\r\n            .filter(entry => entry[1] != null)\r\n            // map filter column to display name\r\n            .map(entry => this.config.filters.find(f => f.column === entry[0]));\r\n    }));\r\n\r\n    set data(data: T[]) {\r\n        this.pagination$.next({...this.pagination$.value, data});\r\n    }\r\n\r\n    get data(): T[] {\r\n        return this.pagination$.value ? this.pagination$.value.data : [];\r\n    }\r\n\r\n    get paginatedOnce$(): Observable<boolean> {\r\n        return this.config.dataPaginator.paginatedOnce$.pipe(filter(val => !!val), take(1));\r\n    }\r\n\r\n    get noResults$() {\r\n        // check if paginated at least once or if\r\n        // data has been set via \"setData\" method\r\n        return combineLatest([\r\n            this.config.dataPaginator.noResults$,\r\n            this.pagination$,\r\n        ]).pipe(map(([noResults, paginationResponse]) => {\r\n            return noResults && (paginationResponse && !paginationResponse.data.length);\r\n        }));\r\n    }\r\n\r\n    get loading$() {\r\n        return this.config.dataPaginator.loading$;\r\n    }\r\n\r\n    get totalCount$(): Observable<number|null> {\r\n        return this.pagination$.pipe(map(p => p ? p.total : null));\r\n    }\r\n\r\n    constructor(public config: DataTableSourceConfig<T>) {\r\n        if (this.config.filters) {\r\n            this.config.filters.forEach(f => {\r\n                const control = new FormControl(f.defaultValue || null);\r\n                this.filterForm.addControl(f.column, control);\r\n            });\r\n            this.applyFiltersFromQueryParams();\r\n        }\r\n        if (config.dataPaginator && config.dontUpdateQueryParams) {\r\n            config.dataPaginator.dontUpdateQueryParams = true;\r\n        }\r\n    }\r\n\r\n    public anyRowsSelected() {\r\n        return this.selectedRows.hasValue();\r\n    }\r\n\r\n    public allRowsSelected(): boolean {\r\n        return this.selectedRows.selected.length &&\r\n            this.selectedRows.selected.length === this.pagination$.value.data.length;\r\n    }\r\n\r\n    public toggleAllRows() {\r\n        this.allRowsSelected() ?\r\n            this.deselectAllItems() :\r\n            this.pagination$.value.data.forEach(row => this.selectedRows.select(row));\r\n    }\r\n\r\n    public deselectAllItems() {\r\n        this.selectedRows.clear();\r\n    }\r\n\r\n    public getSelectedItems(): number[] {\r\n        return this.selectedRows.selected.map(item => item['id']);\r\n    }\r\n\r\n    public setSelectedItems(items: T[]) {\r\n        this.deselectAllItems();\r\n        this.selectedRows.select(...items);\r\n    }\r\n    \r\n    public removeFilter(column: string) {\r\n        this.filterForm.get(column).setValue(null);\r\n    }\r\n\r\n    public updateConfig(config: DataTableSourceConfig<T>) {\r\n        this.config = {...this.config, ...config};\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Merge specified params with current\r\n     * pagination params and reload data.\r\n     */\r\n    public reload(params: object = {}) {\r\n        this.userParamsChange$.next(params);\r\n        if ( ! this.initiated) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    public canLoadNextPage() {\r\n        return this.pagination$.value &&\r\n            this.getCurrentPage() < this.pagination$.value.last_page;\r\n    }\r\n\r\n    public loadNextPage() {\r\n        this.nextPageLoader$.next({page: this.getCurrentPage() + 1});\r\n    }\r\n\r\n    /**\r\n     * Reset current pagination params to initial\r\n     * state and reload data using specified params\r\n     */\r\n    public reset(params?: object) {\r\n        this.searchControl.reset();\r\n        this.resetSort();\r\n        this.resetMatPaginator();\r\n        this.deselectAllItems();\r\n        this.reload(params);\r\n    }\r\n\r\n    public init(config?: DataTableSourceConfig<T>) {\r\n        if (this.initiated) return this;\r\n        if (config) this.updateConfig(config);\r\n        const sortChange = this.config.matSort ?\r\n            merge(this.config.matSort.sortChange, this.config.matSort.initialized) :\r\n            this.virtualSort$;\r\n        const pageChange = this.config.matPaginator ?\r\n            merge(this.config.matPaginator.page, this.config.matPaginator.initialized) :\r\n            this.nextPageLoader$;\r\n        const searchChange = this.searchControl.valueChanges.pipe(\r\n            debounceTime(400),\r\n            distinctUntilChanged(),\r\n            map(query => {\r\n                return {query};\r\n            })\r\n        );\r\n        const filterChange = this.filterForm.valueChanges.pipe(map((value: object) => {\r\n            // remove \"undefined\" values from filters object\r\n            Object.keys(value).forEach(key => {\r\n                if (value[key] == null) {\r\n                    delete value[key];\r\n                // return only ID if whole model is bound to form\r\n                } else if (value[key].id) {\r\n                    value[key] = value[key].id;\r\n                }\r\n            });\r\n            return value;\r\n        }));\r\n\r\n        combineLatest([sortChange, pageChange, searchChange, filterChange, this.userParamsChange$])\r\n            .pipe(\r\n                // prevent double trigger when resetting all filters at the same time\r\n                debounceTime(0),\r\n                map(params => this.transformParams(params as any)),\r\n            )\r\n            .subscribe(params => {\r\n                this.config.dataPaginator.paginate(params, this.config.uri, this.config.initialData);\r\n            });\r\n\r\n        this.config.dataPaginator.pagination$.subscribe(pagination => {\r\n            // material paginator current page is zero-based while laravel starts from one\r\n            if (this.config.matPaginator) {\r\n                this.config.matPaginator.pageIndex = pagination.current_page - 1;\r\n                this.config.matPaginator.pageSize = pagination.per_page;\r\n                this.config.matPaginator.length = pagination.data.length ? pagination.total : 0;\r\n            }\r\n\r\n            // append data instead of overriding with next page data (infinite scroll).\r\n            // if page did not change, we can assume that it was filter or sort\r\n            // change and we should use only new data, even on infinite scroll\r\n            if (this.config.appendData && pagination.current_page !== this.getCurrentPage()) {\r\n                const currentData = this.pagination$.value ? this.pagination$.value.data : [];\r\n                pagination = {...pagination, data: [...currentData, ...pagination.data]};\r\n            }\r\n\r\n            this.pagination$.next(pagination);\r\n        });\r\n\r\n        // angular does not fire \"valueChanges\" on form control if default\r\n        // value is not provided, so need to trigger it manually here otherwise\r\n        // changes pipeline will not fire until search control value changes\r\n        // # https://github.com/angular/angular/issues/14542\r\n        this.searchControl.setValue(null);\r\n        this.filterForm.patchValue({});\r\n\r\n        this.initiated = true;\r\n        return this;\r\n    }\r\n\r\n    public getCurrentPage(): number {\r\n        return this.pagination$.value ? this.pagination$.value.current_page : undefined;\r\n    }\r\n\r\n    private transformParams(originalParams: (PageEvent & Sort)[]) {\r\n        const params = arrayToObject(originalParams);\r\n\r\n        // have mat paginator\r\n        if (this.config.matPaginator) {\r\n            // pageIndex can be 0, need to check for undefined or null only\r\n            params.page = params.pageIndex != null ? params.pageIndex + 1 : undefined;\r\n            params.per_page = params.pageSize;\r\n        }\r\n\r\n        if (params.active) {\r\n            params.orderBy = params.active;\r\n            params.orderDir = params.direction;\r\n        }\r\n\r\n        // remove \"undefined\" and renamed values from object\r\n        const keysToRemove = ['pageIndex', 'pageSize', 'active', 'direction', 'previousPageIndex', 'length'];\r\n        Object.keys(params)\r\n            .forEach(key => {\r\n                if (keysToRemove.indexOf(key) > -1 || params[key] == null) {\r\n                    delete params[key];\r\n                }\r\n            });\r\n\r\n        // merge static params specified by users, they will\r\n        // not change and should be sent with every request\r\n        this.paginationParams = {...this.config.staticParams, ...params};\r\n        return this.paginationParams;\r\n    }\r\n\r\n    private resetSort() {\r\n        if ( ! this.config.matSort || ! this.config.matSort.active) return;\r\n        this.config.matSort.sort({\r\n            id: '',\r\n            start: 'desc',\r\n            disableClear: false\r\n        });\r\n    }\r\n\r\n    private resetMatPaginator() {\r\n        if ( ! this.config.matPaginator) return;\r\n        this.config.matPaginator.length = 0;\r\n        this.config.matPaginator._changePageSize(15);\r\n        this.config.matPaginator.firstPage();\r\n    }\r\n\r\n    public connect(): Observable<T[]> {\r\n        return this.pagination$.pipe(\r\n            filter(p => !!p), // skip first \"null\" on behaviour subject\r\n            map(p => p ? p.data : [])\r\n        );\r\n    }\r\n\r\n    public disconnect() {\r\n        this.config.dataPaginator.destroy();\r\n        this.pagination$.complete();\r\n    }\r\n\r\n    private applyFiltersFromQueryParams() {\r\n        const queryParams = this.config.dataPaginator.currentQueryParams();\r\n        const queryValues = {};\r\n        Object.keys(this.filterForm.controls).forEach(filterName => {\r\n            let queryValue = queryParams[filterName];\r\n            if (queryValue) {\r\n                if (queryValue === 'false') {\r\n                    queryValue = false;\r\n                } else if (queryValue === 'true') {\r\n                    queryValue = true;\r\n                }\r\n                queryValues[filterName] = queryValue;\r\n            }\r\n        });\r\n        if (Object.keys(queryValues).length) {\r\n            setTimeout(() => {\r\n                this.filterForm.patchValue(queryValues);\r\n            });\r\n        }\r\n    }\r\n}\r\n","export function arrayToObject(array: object[]): {[key: string]: any} {\r\n    return array.reduce((previous, current) => {\r\n        return {...previous, ...current};\r\n    });\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport { Params, Router } from '@angular/router';\r\nimport {BehaviorSubject, Observable, of, ReplaySubject, Subscription} from 'rxjs';\r\nimport {map, switchMap, take, tap} from 'rxjs/operators';\r\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\r\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\r\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class Paginator<T> {\r\n    protected params$ = new BehaviorSubject({});\r\n    private backendUri: string;\r\n    private lastResponse$ = new ReplaySubject<PaginationResponse<T>>(1);\r\n    private subscription: Subscription;\r\n    private initiated = false;\r\n    public paginatedOnce$ = new BehaviorSubject<boolean>(false);\r\n\r\n    // might not want to update query params sometimes\r\n    // if data table is only smaller part of the page\r\n    public dontUpdateQueryParams = false;\r\n    public loading$ = new BehaviorSubject(false);\r\n\r\n    public get pagination$(): Observable<PaginationResponse<T>> {\r\n        return this.lastResponse$.asObservable();\r\n    }\r\n\r\n    public get noResults$() {\r\n        // only return TRUE if data has already been\r\n        // loaded from backend and there were no results\r\n        return this.pagination$.pipe(map(p => !!p.data && p.data.length === 0));\r\n    }\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private http: AppHttpClient,\r\n    ) {}\r\n\r\n    public paginate(userParams: object = {}, url?: string, initialData?: PaginationResponse<T>): Observable<PaginationResponse<T>> {\r\n        // only use query params on first pagination, so query params can be removed via user params\r\n        const queryParams = !this.initiated ? this.currentQueryParams() : {};\r\n        this.params$.next({...queryParams, ...userParams});\r\n\r\n        if ( ! this.initiated) {\r\n            this.init(url, initialData);\r\n        }\r\n\r\n        // prevent multiple subscriptions\r\n        return this.pagination$.pipe(take(1));\r\n    }\r\n\r\n    public setPagination(pagination: PaginationResponse<T>) {\r\n        this.lastResponse$.next(pagination);\r\n        this.paginatedOnce$.next(true);\r\n    }\r\n\r\n    public currentQueryParams(): Params {\r\n        return this.router.routerState.root.snapshot.queryParams;\r\n    }\r\n\r\n    private init(uri: string, initialData?: PaginationResponse<T>) {\r\n        this.backendUri = uri;\r\n        this.subscription = this.params$.pipe(\r\n            switchMap(params => {\r\n                this.loading$.next(true);\r\n\r\n                // if we got initial pagination response (of 1st page)\r\n                // return that instead of making 1st page http request\r\n                const request = !this.paginatedOnce$.value && initialData ?\r\n                    of({pagination: initialData}) :\r\n                    this.http.get(this.backendUri, params);\r\n\r\n                return request.pipe(\r\n                    // can't use \"finalize\" here as it will complete after loading$.next(true)\r\n                    // call above, which will prevent loading bar from showing\r\n                    // if pagination request is cancelled and new one is queued\r\n                    tap(() => {\r\n                        this.updateQueryParams(params);\r\n                        this.loading$.next(false);\r\n                        this.paginatedOnce$.next(true);\r\n                    }, () => {\r\n                        this.loading$.next(false);\r\n                        this.paginatedOnce$.next(true);\r\n                    })\r\n                ) as PaginatedBackendResponse<T>;\r\n            })\r\n        ).subscribe(response => {\r\n            this.lastResponse$.next(response.pagination);\r\n        });\r\n\r\n        this.initiated = true;\r\n    }\r\n\r\n    private updateQueryParams(params = {}) {\r\n        if (this.dontUpdateQueryParams) return;\r\n        this.router.navigate([], {queryParams: params, replaceUrl: true});\r\n    }\r\n\r\n    public destroy() {\r\n        this.subscription && this.subscription.unsubscribe();\r\n    }\r\n}\r\n"]}